/*
Copyright 2019-present Faye Amacker.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package tpm

import (
	"bytes"
	"crypto/x509"
	"encoding/json"
	"reflect"
	"strings"
	"testing"

	"github.com/nadroz/webauthn"
)

var (
	// Test data from apowers313's fido2-helpers (2019) at https://github.com/apowers313/fido2-helpers/blob/master/fido2-helpers.js
	attestation1 = `{
		"rawId": "hWzdFiPbOMQ5KNBsMhs-Zeh8F0iTHrH63YKkrxJFgjQ",
		"id":    "hWzdFiPbOMQ5KNBsMhs-Zeh8F0iTHrH63YKkrxJFgjQ",
		"response": {
			"attestationObject": "o2NmbXRjdHBtaGF1dGhEYXRhWQFnlWkIjx7O4yMpVANdvRDXyuORMFonUbVZu4_Xy7IpvdRFAAAAAAiYcFjK3EuBtuEw3lDcvpYAIIVs3RYj2zjEOSjQbDIbPmXofBdIkx6x-t2CpK8SRYI0pAEDAzkBACBZAQDF2m9Nk1e94gL1xVjNCjFW0lTy4K2atXkx-YJrdH3hrE8p1gcIdNzleRDhmERJnY5CRwM5sXDQIrUBq4jpwvTtMC5HGccN6-iEJAPtm9_CJzCmGhtw9hbF8bcAys94RhN9xLLUaajhWqtPrYZXCEAi0o9E2QdTIxJrcAfJgZOf33JMr0--R1BAQxpOoGRDC8ss-tfQW9ufZLWw4JUuz4Z5Jz1sbfqBYB8UUDMWoT0HgsMaPmvd7T17xGvB-pvvDf-Dt96vFGtYLEZEgho8Yu26pr5CK_BOQ-2vX9N4MIYVPXNhogMGGmKYqybhM3yhye0GdBpZBUd5iOcgME6uGJ1_IUMBAAFnYXR0U3RtdKZjdmVyYzIuMGNhbGc5__5jc2lnWQEAcV1izWGUWIs0DEOZNQGdriNNXo6nbrGDLzEAeswCK9njYGCLmOkHVgSyafhsjCEMZkQmuPUmEOMDKosqxup_tiXQwG4yCW9TyWoINWGayQ4vcr6Ys-l6KMPkg__d2VywhfonnTJDBfE_4BIRD60GR0qBzTarthDHQFMqRtoUtuOsTF5jedU3EQPojRA5iCNC2naCCZuMSURdlPmhlW5rAaRZVF41ZZECi5iFOM2rO0UpGuQSLUvr1MqQOsDytMf7qWZMvwT_5_8BF6GNdB2l2VzmIJBbV6g8z7dj0fRkjlCXBp8UG2LvTq5SsfugrRWXOJ8BkdMplPfl0mz6ssU_n2N4NWOCWQS2MIIEsjCCA5qgAwIBAgIQEyidpWZzRxOSMNfrAvV1fzANBgkqhkiG9w0BAQsFADBBMT8wPQYDVQQDEzZOQ1UtTlRDLUtFWUlELTE1OTFENEI2RUFGOThEMDEwNDg2NEI2OTAzQTQ4REQwMDI2MDc3RDMwHhcNMTgwNTIwMTYyMDQ0WhcNMjgwNTIwMTYyMDQ0WjAAMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvQ6XK2ujM11E7x4SL34p252ncyQTd3-4r5ALQhBbFKS95gUsuENTG-48GBQwu48i06cckm3eH20TUeJvn4-pj6i8LFOrIK14T3P3GFzbxgQLq1KVm63JWDdEXk789JgzQjHNO7DZFKWTEiktwmBUPUA88TjQcXOtrR5EXTrt1FzGzabOepFann3Ny_XtxI8lDZ3QLwPLJfmk7puGtkGNaXOsRC7GLAnoEB7UWvjiyKG6HAtvVTgxcW5OQnHFb9AHycU5QdukXrP0njdCpLCRR0Nq6VMKmVU3MaGh-DCwYEB32sPNPdDkPDWyk16ItwcmXqfSBV5ZOr8ifvcXbCWUWwIDAQABo4IB5TCCAeEwDgYDVR0PAQH_BAQDAgeAMAwGA1UdEwEB_wQCMAAwbQYDVR0gAQH_BGMwYTBfBgkrBgEEAYI3FR8wUjBQBggrBgEFBQcCAjBEHkIAVABDAFAAQQAgACAAVAByAHUAcwB0AGUAZAAgACAAUABsAGEAdABmAG8AcgBtACAAIABJAGQAZQBuAHQAaQB0AHkwEAYDVR0lBAkwBwYFZ4EFCAMwSgYDVR0RAQH_BEAwPqQ8MDoxODAOBgVngQUCAwwFaWQ6MTMwEAYFZ4EFAgIMB05QQ1Q2eHgwFAYFZ4EFAgEMC2lkOjRFNTQ0MzAwMB8GA1UdIwQYMBaAFMISqVvO-lb4wMFvsVvdAzRHs3qjMB0GA1UdDgQWBBSv4kXTSA8i3NUM0q57lrWpM8p_4TCBswYIKwYBBQUHAQEEgaYwgaMwgaAGCCsGAQUFBzAChoGTaHR0cHM6Ly9hemNzcHJvZG5jdWFpa3B1Ymxpc2guYmxvYi5jb3JlLndpbmRvd3MubmV0L25jdS1udGMta2V5aWQtMTU5MWQ0YjZlYWY5OGQwMTA0ODY0YjY5MDNhNDhkZDAwMjYwNzdkMy8zYjkxOGFlNC0wN2UxLTQwNTktOTQ5MS0wYWQyNDgxOTA4MTguY2VyMA0GCSqGSIb3DQEBCwUAA4IBAQAs-vqdkDX09fNNYqzbv3Lh0vl6RgGpPGl-MYgO8Lg1I9UKvEUaaUHm845ABS8m7r9p22RCWO6TSEPS0YUYzAsNuiKiGVna4nB9JWZaV9GDS6aMD0nJ8kNciorDsV60j0Yb592kv1VkOKlbTF7-Z10jaapx0CqhxEIUzEBb8y9Pa8oOaQf8ORhDHZp-mbn_W8rUzXSDS0rFbWKaW4tGpVoKGRH-f9vIeXxGlxVS0wqqRm_r-h1aZInta0OOiL_S4367gZyeLL3eUnzdd-eYySYn2XINPbVacK8ZifdsLMwiNtz5uM1jbqpEn2UoB3Hcdn0hc12jTLPWFfg7GiKQ0hk9WQXsMIIF6DCCA9CgAwIBAgITMwAAAQDiBsSROVGXhwAAAAABADANBgkqhkiG9w0BAQsFADCBjDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjE2MDQGA1UEAxMtTWljcm9zb2Z0IFRQTSBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDE0MB4XDTE3MDIwMTE3NDAyNFoXDTI5MTIzMTE3NDAyNFowQTE_MD0GA1UEAxM2TkNVLU5UQy1LRVlJRC0xNTkxRDRCNkVBRjk4RDAxMDQ4NjRCNjkwM0E0OEREMDAyNjA3N0QzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9IwUMSiQUbrQR0NLkKR-9RB8zfHYdlmDB0XN_m8qrNHKRJ__lBOR-mwU_h3MFRZF6X3ZZwka1DtwBdzLFV8lVu33bc15stjSd6B22HRRKQ3sIns5AYQxg0eX2PtWCJuIhxdM_jDjP2hq9Yvx-ibt1IO9UZwj83NGxXc7Gk2UvCs9lcFSp6U8zzl5fGFCKYcxIKH0qbPrzjlyVyZTKwGGSTeoMMEdsZiq-m_xIcrehYuHg-FAVaPLLTblS1h5cu80-ruFUm5Xzl61YjVU9tAV_Y4joAsJ5QP3VPocFhr5YVsBVYBiBcQtr5JFdJXZWWEgYcFLdAFUk8nJERS7-5xLuQIDAQABo4IBizCCAYcwCwYDVR0PBAQDAgGGMBsGA1UdJQQUMBIGCSsGAQQBgjcVJAYFZ4EFCAMwFgYDVR0gBA8wDTALBgkrBgEEAYI3FR8wEgYDVR0TAQH_BAgwBgEB_wIBADAdBgNVHQ4EFgQUwhKpW876VvjAwW-xW90DNEezeqMwHwYDVR0jBBgwFoAUeowKzi9IYhfilNGuVcFS7HF0pFYwcAYDVR0fBGkwZzBloGOgYYZfaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVFBNJTIwUm9vdCUyMENlcnRpZmljYXRlJTIwQXV0aG9yaXR5JTIwMjAxNC5jcmwwfQYIKwYBBQUHAQEEcTBvMG0GCCsGAQUFBzAChmFodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRQTSUyMFJvb3QlMjBDZXJ0aWZpY2F0ZSUyMEF1dGhvcml0eSUyMDIwMTQuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQAKc9z1UUBAaybIVnK8yL1N1iGJFFFFw_PpkxW76hgQhUcCxNFQskfahfFzkBD05odVC1DKyk2PyOle0G86FCmZiJa14MtKNsiu66nVqk2hr8iIcu-cYEsgb446yIGd1NblQKA1C_28F2KHm8YRgcFtRSkWEMuDiVMa0HDU8aI6ZHO04Naj86nXeULJSZsA0pQwNJ04-QJP3MFQzxQ7md6D-pCx-LVA-WUdGxT1ofaO5NFxq0XjubnZwRjQazy_m93dKWp19tbBzTUKImgUKLYGcdmVWXAxUrkxHN2FbZGOYWfmE2TGQXS2Z-g4YAQo1PleyOav3HNB8ti7u5HpI3t9a73xuECy2gFcZQ24DJuBaQe4mU5I_hPiAa-822nPPL6w8m1eegxhHf7ziRW_hW8s1cvAZZ5Jpev96zL_zRv34MsRWhKwLbu2oOCSEYYh8D8DbQZjmsxlUYR_q1cP8JKiIo6NNJ85g7sjTZgXxeanA9wZwqwJB-P98VdVslC17PmVu0RHOqRtxrht7OFT7Z10ecz0tj9ODXrv5nmBktmbgHRirRMl84wp7-PJhTXdHbxZv-OoL4HP6FxyDbHxLB7QmR4-VoEZN0vsybb1A8KEj2pkNY_tmxHH6k87euM99bB8FHrW9FNrXCGL1p6-PYtiky52a5YQZGT8Hz-ZnxobTmhjZXJ0SW5mb1ih_1RDR4AXACIAC7xZ9N_ZpqQtw7hmr_LfDRmCa78BS2erCtbrsXYwa4AHABSsnz8FacZi-wkUkfHu4xjG8MPfmwAAAAGxWkjHaED549jznwUBqeDEpT-7xBMAIgALcSGuv6a5r9BwMvQvCSXg7GdAjdWZpXv6D4DH8VYBCE8AIgALAVI0eQ_AAZjNvrhUEMK2q4wxuwIFOnHIDF0Qljhf47RncHViQXJlYVkBNgABAAsABgRyACCd_8vzbDg65pn7mGjcbcuJ1xU4hL4oA5IsEkFYv60irgAQABAIAAAAAAABAMXab02TV73iAvXFWM0KMVbSVPLgrZq1eTH5gmt0feGsTynWBwh03OV5EOGYREmdjkJHAzmxcNAitQGriOnC9O0wLkcZxw3r6IQkA-2b38InMKYaG3D2FsXxtwDKz3hGE33EstRpqOFaq0-thlcIQCLSj0TZB1MjEmtwB8mBk5_fckyvT75HUEBDGk6gZEMLyyz619Bb259ktbDglS7PhnknPWxt-oFgHxRQMxahPQeCwxo-a93tPXvEa8H6m-8N_4O33q8Ua1gsRkSCGjxi7bqmvkIr8E5D7a9f03gwhhU9c2GiAwYaYpirJuEzfKHJ7QZ0GlkFR3mI5yAwTq4YnX8",
			"clientDataJSON":    "ew0KCSJ0eXBlIiA6ICJ3ZWJhdXRobi5jcmVhdGUiLA0KCSJjaGFsbGVuZ2UiIDogIndrNkxxRVhBTUFacHFjVFlsWTJ5b3I1RGppeUlfYjFneTluRE90Q0IxeUdZbm1fNFdHNFVrMjRGQXI3QXhUT0ZmUU1laWdrUnhPVExaTnJMeEN2Vl9RIiwNCgkib3JpZ2luIiA6ICJodHRwczovL3dlYmF1dGhuLm9yZyIsDQoJInRva2VuQmluZGluZyIgOiANCgl7DQoJCSJzdGF0dXMiIDogInN1cHBvcnRlZCINCgl9DQp9"
		},
		"type": "public-key"
	}`
	attestation1Sig = []byte{
		0x71, 0x5D, 0x62, 0xCD, 0x61, 0x94, 0x58, 0x8B, 0x34, 0x0C, 0x43, 0x99, 0x35, 0x01, 0x9D, 0xAE,
		0x23, 0x4D, 0x5E, 0x8E, 0xA7, 0x6E, 0xB1, 0x83, 0x2F, 0x31, 0x00, 0x7A, 0xCC, 0x02, 0x2B, 0xD9,
		0xE3, 0x60, 0x60, 0x8B, 0x98, 0xE9, 0x07, 0x56, 0x04, 0xB2, 0x69, 0xF8, 0x6C, 0x8C, 0x21, 0x0C,
		0x66, 0x44, 0x26, 0xB8, 0xF5, 0x26, 0x10, 0xE3, 0x03, 0x2A, 0x8B, 0x2A, 0xC6, 0xEA, 0x7F, 0xB6,
		0x25, 0xD0, 0xC0, 0x6E, 0x32, 0x09, 0x6F, 0x53, 0xC9, 0x6A, 0x08, 0x35, 0x61, 0x9A, 0xC9, 0x0E,
		0x2F, 0x72, 0xBE, 0x98, 0xB3, 0xE9, 0x7A, 0x28, 0xC3, 0xE4, 0x83, 0xFF, 0xDD, 0xD9, 0x5C, 0xB0,
		0x85, 0xFA, 0x27, 0x9D, 0x32, 0x43, 0x05, 0xF1, 0x3F, 0xE0, 0x12, 0x11, 0x0F, 0xAD, 0x06, 0x47,
		0x4A, 0x81, 0xCD, 0x36, 0xAB, 0xB6, 0x10, 0xC7, 0x40, 0x53, 0x2A, 0x46, 0xDA, 0x14, 0xB6, 0xE3,
		0xAC, 0x4C, 0x5E, 0x63, 0x79, 0xD5, 0x37, 0x11, 0x03, 0xE8, 0x8D, 0x10, 0x39, 0x88, 0x23, 0x42,
		0xDA, 0x76, 0x82, 0x09, 0x9B, 0x8C, 0x49, 0x44, 0x5D, 0x94, 0xF9, 0xA1, 0x95, 0x6E, 0x6B, 0x01,
		0xA4, 0x59, 0x54, 0x5E, 0x35, 0x65, 0x91, 0x02, 0x8B, 0x98, 0x85, 0x38, 0xCD, 0xAB, 0x3B, 0x45,
		0x29, 0x1A, 0xE4, 0x12, 0x2D, 0x4B, 0xEB, 0xD4, 0xCA, 0x90, 0x3A, 0xC0, 0xF2, 0xB4, 0xC7, 0xFB,
		0xA9, 0x66, 0x4C, 0xBF, 0x04, 0xFF, 0xE7, 0xFF, 0x01, 0x17, 0xA1, 0x8D, 0x74, 0x1D, 0xA5, 0xD9,
		0x5C, 0xE6, 0x20, 0x90, 0x5B, 0x57, 0xA8, 0x3C, 0xCF, 0xB7, 0x63, 0xD1, 0xF4, 0x64, 0x8E, 0x50,
		0x97, 0x06, 0x9F, 0x14, 0x1B, 0x62, 0xEF, 0x4E, 0xAE, 0x52, 0xB1, 0xFB, 0xA0, 0xAD, 0x15, 0x97,
		0x38, 0x9F, 0x01, 0x91, 0xD3, 0x29, 0x94, 0xF7, 0xE5, 0xD2, 0x6C, 0xFA, 0xB2, 0xC5, 0x3F, 0x9F,
	}
	attestation1CredCert = []byte{
		0x30, 0x82, 0x04, 0xb2, 0x30, 0x82, 0x03, 0x9a, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x13,
		0x28, 0x9d, 0xa5, 0x66, 0x73, 0x47, 0x13, 0x92, 0x30, 0xd7, 0xeb, 0x02, 0xf5, 0x75, 0x7f, 0x30,
		0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x41,
		0x31, 0x3f, 0x30, 0x3d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x36, 0x4e, 0x43, 0x55, 0x2d, 0x4e,
		0x54, 0x43, 0x2d, 0x4b, 0x45, 0x59, 0x49, 0x44, 0x2d, 0x31, 0x35, 0x39, 0x31, 0x44, 0x34, 0x42,
		0x36, 0x45, 0x41, 0x46, 0x39, 0x38, 0x44, 0x30, 0x31, 0x30, 0x34, 0x38, 0x36, 0x34, 0x42, 0x36,
		0x39, 0x30, 0x33, 0x41, 0x34, 0x38, 0x44, 0x44, 0x30, 0x30, 0x32, 0x36, 0x30, 0x37, 0x37, 0x44,
		0x33, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x30, 0x35, 0x32, 0x30, 0x31, 0x36, 0x32, 0x30, 0x34,
		0x34, 0x5a, 0x17, 0x0d, 0x32, 0x38, 0x30, 0x35, 0x32, 0x30, 0x31, 0x36, 0x32, 0x30, 0x34, 0x34,
		0x5a, 0x30, 0x00, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
		0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02,
		0x82, 0x01, 0x01, 0x00, 0xbd, 0x0e, 0x97, 0x2b, 0x6b, 0xa3, 0x33, 0x5d, 0x44, 0xef, 0x1e, 0x12,
		0x2f, 0x7e, 0x29, 0xdb, 0x9d, 0xa7, 0x73, 0x24, 0x13, 0x77, 0x7f, 0xb8, 0xaf, 0x90, 0x0b, 0x42,
		0x10, 0x5b, 0x14, 0xa4, 0xbd, 0xe6, 0x05, 0x2c, 0xb8, 0x43, 0x53, 0x1b, 0xee, 0x3c, 0x18, 0x14,
		0x30, 0xbb, 0x8f, 0x22, 0xd3, 0xa7, 0x1c, 0x92, 0x6d, 0xde, 0x1f, 0x6d, 0x13, 0x51, 0xe2, 0x6f,
		0x9f, 0x8f, 0xa9, 0x8f, 0xa8, 0xbc, 0x2c, 0x53, 0xab, 0x20, 0xad, 0x78, 0x4f, 0x73, 0xf7, 0x18,
		0x5c, 0xdb, 0xc6, 0x04, 0x0b, 0xab, 0x52, 0x95, 0x9b, 0xad, 0xc9, 0x58, 0x37, 0x44, 0x5e, 0x4e,
		0xfc, 0xf4, 0x98, 0x33, 0x42, 0x31, 0xcd, 0x3b, 0xb0, 0xd9, 0x14, 0xa5, 0x93, 0x12, 0x29, 0x2d,
		0xc2, 0x60, 0x54, 0x3d, 0x40, 0x3c, 0xf1, 0x38, 0xd0, 0x71, 0x73, 0xad, 0xad, 0x1e, 0x44, 0x5d,
		0x3a, 0xed, 0xd4, 0x5c, 0xc6, 0xcd, 0xa6, 0xce, 0x7a, 0x91, 0x5a, 0x9e, 0x7d, 0xcd, 0xcb, 0xf5,
		0xed, 0xc4, 0x8f, 0x25, 0x0d, 0x9d, 0xd0, 0x2f, 0x03, 0xcb, 0x25, 0xf9, 0xa4, 0xee, 0x9b, 0x86,
		0xb6, 0x41, 0x8d, 0x69, 0x73, 0xac, 0x44, 0x2e, 0xc6, 0x2c, 0x09, 0xe8, 0x10, 0x1e, 0xd4, 0x5a,
		0xf8, 0xe2, 0xc8, 0xa1, 0xba, 0x1c, 0x0b, 0x6f, 0x55, 0x38, 0x31, 0x71, 0x6e, 0x4e, 0x42, 0x71,
		0xc5, 0x6f, 0xd0, 0x07, 0xc9, 0xc5, 0x39, 0x41, 0xdb, 0xa4, 0x5e, 0xb3, 0xf4, 0x9e, 0x37, 0x42,
		0xa4, 0xb0, 0x91, 0x47, 0x43, 0x6a, 0xe9, 0x53, 0x0a, 0x99, 0x55, 0x37, 0x31, 0xa1, 0xa1, 0xf8,
		0x30, 0xb0, 0x60, 0x40, 0x77, 0xda, 0xc3, 0xcd, 0x3d, 0xd0, 0xe4, 0x3c, 0x35, 0xb2, 0x93, 0x5e,
		0x88, 0xb7, 0x07, 0x26, 0x5e, 0xa7, 0xd2, 0x05, 0x5e, 0x59, 0x3a, 0xbf, 0x22, 0x7e, 0xf7, 0x17,
		0x6c, 0x25, 0x94, 0x5b, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0xe5, 0x30, 0x82, 0x01,
		0xe1, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07,
		0x80, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30,
		0x6d, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x01, 0x01, 0xff, 0x04, 0x63, 0x30, 0x61, 0x30, 0x5f, 0x06,
		0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x1f, 0x30, 0x52, 0x30, 0x50, 0x06, 0x08,
		0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02, 0x30, 0x44, 0x1e, 0x42, 0x00, 0x54, 0x00, 0x43,
		0x00, 0x50, 0x00, 0x41, 0x00, 0x20, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x75, 0x00, 0x73,
		0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6c, 0x00, 0x61,
		0x00, 0x74, 0x00, 0x66, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6d, 0x00, 0x20, 0x00, 0x20, 0x00, 0x49,
		0x00, 0x64, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x30, 0x10,
		0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x09, 0x30, 0x07, 0x06, 0x05, 0x67, 0x81, 0x05, 0x08, 0x03,
		0x30, 0x4a, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x01, 0x01, 0xff, 0x04, 0x40, 0x30, 0x3e, 0xa4, 0x3c,
		0x30, 0x3a, 0x31, 0x38, 0x30, 0x0e, 0x06, 0x05, 0x67, 0x81, 0x05, 0x02, 0x03, 0x0c, 0x05, 0x69,
		0x64, 0x3a, 0x31, 0x33, 0x30, 0x10, 0x06, 0x05, 0x67, 0x81, 0x05, 0x02, 0x02, 0x0c, 0x07, 0x4e,
		0x50, 0x43, 0x54, 0x36, 0x78, 0x78, 0x30, 0x14, 0x06, 0x05, 0x67, 0x81, 0x05, 0x02, 0x01, 0x0c,
		0x0b, 0x69, 0x64, 0x3a, 0x34, 0x45, 0x35, 0x34, 0x34, 0x33, 0x30, 0x30, 0x30, 0x1f, 0x06, 0x03,
		0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xc2, 0x12, 0xa9, 0x5b, 0xce, 0xfa, 0x56,
		0xf8, 0xc0, 0xc1, 0x6f, 0xb1, 0x5b, 0xdd, 0x03, 0x34, 0x47, 0xb3, 0x7a, 0xa3, 0x30, 0x1d, 0x06,
		0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xaf, 0xe2, 0x45, 0xd3, 0x48, 0x0f, 0x22, 0xdc,
		0xd5, 0x0c, 0xd2, 0xae, 0x7b, 0x96, 0xb5, 0xa9, 0x33, 0xca, 0x7f, 0xe1, 0x30, 0x81, 0xb3, 0x06,
		0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x81, 0xa6, 0x30, 0x81, 0xa3, 0x30,
		0x81, 0xa0, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x81, 0x93, 0x68,
		0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x7a, 0x63, 0x73, 0x70, 0x72, 0x6f, 0x64, 0x6e,
		0x63, 0x75, 0x61, 0x69, 0x6b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x62, 0x6c, 0x6f,
		0x62, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2e, 0x6e,
		0x65, 0x74, 0x2f, 0x6e, 0x63, 0x75, 0x2d, 0x6e, 0x74, 0x63, 0x2d, 0x6b, 0x65, 0x79, 0x69, 0x64,
		0x2d, 0x31, 0x35, 0x39, 0x31, 0x64, 0x34, 0x62, 0x36, 0x65, 0x61, 0x66, 0x39, 0x38, 0x64, 0x30,
		0x31, 0x30, 0x34, 0x38, 0x36, 0x34, 0x62, 0x36, 0x39, 0x30, 0x33, 0x61, 0x34, 0x38, 0x64, 0x64,
		0x30, 0x30, 0x32, 0x36, 0x30, 0x37, 0x37, 0x64, 0x33, 0x2f, 0x33, 0x62, 0x39, 0x31, 0x38, 0x61,
		0x65, 0x34, 0x2d, 0x30, 0x37, 0x65, 0x31, 0x2d, 0x34, 0x30, 0x35, 0x39, 0x2d, 0x39, 0x34, 0x39,
		0x31, 0x2d, 0x30, 0x61, 0x64, 0x32, 0x34, 0x38, 0x31, 0x39, 0x30, 0x38, 0x31, 0x38, 0x2e, 0x63,
		0x65, 0x72, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x2c, 0xfa, 0xfa, 0x9d, 0x90, 0x35, 0xf4, 0xf5, 0xf3, 0x4d,
		0x62, 0xac, 0xdb, 0xbf, 0x72, 0xe1, 0xd2, 0xf9, 0x7a, 0x46, 0x01, 0xa9, 0x3c, 0x69, 0x7e, 0x31,
		0x88, 0x0e, 0xf0, 0xb8, 0x35, 0x23, 0xd5, 0x0a, 0xbc, 0x45, 0x1a, 0x69, 0x41, 0xe6, 0xf3, 0x8e,
		0x40, 0x05, 0x2f, 0x26, 0xee, 0xbf, 0x69, 0xdb, 0x64, 0x42, 0x58, 0xee, 0x93, 0x48, 0x43, 0xd2,
		0xd1, 0x85, 0x18, 0xcc, 0x0b, 0x0d, 0xba, 0x22, 0xa2, 0x19, 0x59, 0xda, 0xe2, 0x70, 0x7d, 0x25,
		0x66, 0x5a, 0x57, 0xd1, 0x83, 0x4b, 0xa6, 0x8c, 0x0f, 0x49, 0xc9, 0xf2, 0x43, 0x5c, 0x8a, 0x8a,
		0xc3, 0xb1, 0x5e, 0xb4, 0x8f, 0x46, 0x1b, 0xe7, 0xdd, 0xa4, 0xbf, 0x55, 0x64, 0x38, 0xa9, 0x5b,
		0x4c, 0x5e, 0xfe, 0x67, 0x5d, 0x23, 0x69, 0xaa, 0x71, 0xd0, 0x2a, 0xa1, 0xc4, 0x42, 0x14, 0xcc,
		0x40, 0x5b, 0xf3, 0x2f, 0x4f, 0x6b, 0xca, 0x0e, 0x69, 0x07, 0xfc, 0x39, 0x18, 0x43, 0x1d, 0x9a,
		0x7e, 0x99, 0xb9, 0xff, 0x5b, 0xca, 0xd4, 0xcd, 0x74, 0x83, 0x4b, 0x4a, 0xc5, 0x6d, 0x62, 0x9a,
		0x5b, 0x8b, 0x46, 0xa5, 0x5a, 0x0a, 0x19, 0x11, 0xfe, 0x7f, 0xdb, 0xc8, 0x79, 0x7c, 0x46, 0x97,
		0x15, 0x52, 0xd3, 0x0a, 0xaa, 0x46, 0x6f, 0xeb, 0xfa, 0x1d, 0x5a, 0x64, 0x89, 0xed, 0x6b, 0x43,
		0x8e, 0x88, 0xbf, 0xd2, 0xe3, 0x7e, 0xbb, 0x81, 0x9c, 0x9e, 0x2c, 0xbd, 0xde, 0x52, 0x7c, 0xdd,
		0x77, 0xe7, 0x98, 0xc9, 0x26, 0x27, 0xd9, 0x72, 0x0d, 0x3d, 0xb5, 0x5a, 0x70, 0xaf, 0x19, 0x89,
		0xf7, 0x6c, 0x2c, 0xcc, 0x22, 0x36, 0xdc, 0xf9, 0xb8, 0xcd, 0x63, 0x6e, 0xaa, 0x44, 0x9f, 0x65,
		0x28, 0x07, 0x71, 0xdc, 0x76, 0x7d, 0x21, 0x73, 0x5d, 0xa3, 0x4c, 0xb3, 0xd6, 0x15, 0xf8, 0x3b,
		0x1a, 0x22, 0x90, 0xd2, 0x19, 0x3d,
	}
	attestation1CACert0 = []byte{
		0x30, 0x82, 0x05, 0xe8, 0x30, 0x82, 0x03, 0xd0, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x13, 0x33,
		0x00, 0x00, 0x01, 0x00, 0xe2, 0x06, 0xc4, 0x91, 0x39, 0x51, 0x97, 0x87, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x30, 0x81, 0x8c, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55,
		0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x57, 0x61, 0x73, 0x68,
		0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,
		0x07, 0x52, 0x65, 0x64, 0x6d, 0x6f, 0x6e, 0x64, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04,
		0x0a, 0x13, 0x15, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x43, 0x6f, 0x72,
		0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x36, 0x30, 0x34, 0x06, 0x03, 0x55, 0x04,
		0x03, 0x13, 0x2d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x54, 0x50, 0x4d,
		0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
		0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x32, 0x30, 0x31, 0x34,
		0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x32, 0x30, 0x31, 0x31, 0x37, 0x34, 0x30, 0x32, 0x34,
		0x5a, 0x17, 0x0d, 0x32, 0x39, 0x31, 0x32, 0x33, 0x31, 0x31, 0x37, 0x34, 0x30, 0x32, 0x34, 0x5a,
		0x30, 0x41, 0x31, 0x3f, 0x30, 0x3d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x36, 0x4e, 0x43, 0x55,
		0x2d, 0x4e, 0x54, 0x43, 0x2d, 0x4b, 0x45, 0x59, 0x49, 0x44, 0x2d, 0x31, 0x35, 0x39, 0x31, 0x44,
		0x34, 0x42, 0x36, 0x45, 0x41, 0x46, 0x39, 0x38, 0x44, 0x30, 0x31, 0x30, 0x34, 0x38, 0x36, 0x34,
		0x42, 0x36, 0x39, 0x30, 0x33, 0x41, 0x34, 0x38, 0x44, 0x44, 0x30, 0x30, 0x32, 0x36, 0x30, 0x37,
		0x37, 0x44, 0x33, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
		0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02,
		0x82, 0x01, 0x01, 0x00, 0xf4, 0x8c, 0x14, 0x31, 0x28, 0x90, 0x51, 0xba, 0xd0, 0x47, 0x43, 0x4b,
		0x90, 0xa4, 0x7e, 0xf5, 0x10, 0x7c, 0xcd, 0xf1, 0xd8, 0x76, 0x59, 0x83, 0x07, 0x45, 0xcd, 0xfe,
		0x6f, 0x2a, 0xac, 0xd1, 0xca, 0x44, 0x9f, 0xff, 0x94, 0x13, 0x91, 0xfa, 0x6c, 0x14, 0xfe, 0x1d,
		0xcc, 0x15, 0x16, 0x45, 0xe9, 0x7d, 0xd9, 0x67, 0x09, 0x1a, 0xd4, 0x3b, 0x70, 0x05, 0xdc, 0xcb,
		0x15, 0x5f, 0x25, 0x56, 0xed, 0xf7, 0x6d, 0xcd, 0x79, 0xb2, 0xd8, 0xd2, 0x77, 0xa0, 0x76, 0xd8,
		0x74, 0x51, 0x29, 0x0d, 0xec, 0x22, 0x7b, 0x39, 0x01, 0x84, 0x31, 0x83, 0x47, 0x97, 0xd8, 0xfb,
		0x56, 0x08, 0x9b, 0x88, 0x87, 0x17, 0x4c, 0xfe, 0x30, 0xe3, 0x3f, 0x68, 0x6a, 0xf5, 0x8b, 0xf1,
		0xfa, 0x26, 0xed, 0xd4, 0x83, 0xbd, 0x51, 0x9c, 0x23, 0xf3, 0x73, 0x46, 0xc5, 0x77, 0x3b, 0x1a,
		0x4d, 0x94, 0xbc, 0x2b, 0x3d, 0x95, 0xc1, 0x52, 0xa7, 0xa5, 0x3c, 0xcf, 0x39, 0x79, 0x7c, 0x61,
		0x42, 0x29, 0x87, 0x31, 0x20, 0xa1, 0xf4, 0xa9, 0xb3, 0xeb, 0xce, 0x39, 0x72, 0x57, 0x26, 0x53,
		0x2b, 0x01, 0x86, 0x49, 0x37, 0xa8, 0x30, 0xc1, 0x1d, 0xb1, 0x98, 0xaa, 0xfa, 0x6f, 0xf1, 0x21,
		0xca, 0xde, 0x85, 0x8b, 0x87, 0x83, 0xe1, 0x40, 0x55, 0xa3, 0xcb, 0x2d, 0x36, 0xe5, 0x4b, 0x58,
		0x79, 0x72, 0xef, 0x34, 0xfa, 0xbb, 0x85, 0x52, 0x6e, 0x57, 0xce, 0x5e, 0xb5, 0x62, 0x35, 0x54,
		0xf6, 0xd0, 0x15, 0xfd, 0x8e, 0x23, 0xa0, 0x0b, 0x09, 0xe5, 0x03, 0xf7, 0x54, 0xfa, 0x1c, 0x16,
		0x1a, 0xf9, 0x61, 0x5b, 0x01, 0x55, 0x80, 0x62, 0x05, 0xc4, 0x2d, 0xaf, 0x92, 0x45, 0x74, 0x95,
		0xd9, 0x59, 0x61, 0x20, 0x61, 0xc1, 0x4b, 0x74, 0x01, 0x54, 0x93, 0xc9, 0xc9, 0x11, 0x14, 0xbb,
		0xfb, 0x9c, 0x4b, 0xb9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0x8b, 0x30, 0x82, 0x01,
		0x87, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x1b,
		0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x14, 0x30, 0x12, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01,
		0x82, 0x37, 0x15, 0x24, 0x06, 0x05, 0x67, 0x81, 0x05, 0x08, 0x03, 0x30, 0x16, 0x06, 0x03, 0x55,
		0x1d, 0x20, 0x04, 0x0f, 0x30, 0x0d, 0x30, 0x0b, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82,
		0x37, 0x15, 0x1f, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30,
		0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
		0x04, 0x14, 0xc2, 0x12, 0xa9, 0x5b, 0xce, 0xfa, 0x56, 0xf8, 0xc0, 0xc1, 0x6f, 0xb1, 0x5b, 0xdd,
		0x03, 0x34, 0x47, 0xb3, 0x7a, 0xa3, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
		0x16, 0x80, 0x14, 0x7a, 0x8c, 0x0a, 0xce, 0x2f, 0x48, 0x62, 0x17, 0xe2, 0x94, 0xd1, 0xae, 0x55,
		0xc1, 0x52, 0xec, 0x71, 0x74, 0xa4, 0x56, 0x30, 0x70, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x69,
		0x30, 0x67, 0x30, 0x65, 0xa0, 0x63, 0xa0, 0x61, 0x86, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
		0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x63,
		0x6f, 0x6d, 0x2f, 0x70, 0x6b, 0x69, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x72, 0x6c, 0x2f, 0x4d, 0x69,
		0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x25, 0x32, 0x30, 0x54, 0x50, 0x4d, 0x25, 0x32, 0x30,
		0x52, 0x6f, 0x6f, 0x74, 0x25, 0x32, 0x30, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
		0x74, 0x65, 0x25, 0x32, 0x30, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x25, 0x32,
		0x30, 0x32, 0x30, 0x31, 0x34, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x7d, 0x06, 0x08, 0x2b, 0x06, 0x01,
		0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x71, 0x30, 0x6f, 0x30, 0x6d, 0x06, 0x08, 0x2b, 0x06, 0x01,
		0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x61, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
		0x77, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
		0x70, 0x6b, 0x69, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x4d, 0x69, 0x63,
		0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x25, 0x32, 0x30, 0x54, 0x50, 0x4d, 0x25, 0x32, 0x30, 0x52,
		0x6f, 0x6f, 0x74, 0x25, 0x32, 0x30, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
		0x65, 0x25, 0x32, 0x30, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x25, 0x32, 0x30,
		0x32, 0x30, 0x31, 0x34, 0x2e, 0x63, 0x72, 0x74, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
		0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x0a, 0x73, 0xdc, 0xf5,
		0x51, 0x40, 0x40, 0x6b, 0x26, 0xc8, 0x56, 0x72, 0xbc, 0xc8, 0xbd, 0x4d, 0xd6, 0x21, 0x89, 0x14,
		0x51, 0x45, 0xc3, 0xf3, 0xe9, 0x93, 0x15, 0xbb, 0xea, 0x18, 0x10, 0x85, 0x47, 0x02, 0xc4, 0xd1,
		0x50, 0xb2, 0x47, 0xda, 0x85, 0xf1, 0x73, 0x90, 0x10, 0xf4, 0xe6, 0x87, 0x55, 0x0b, 0x50, 0xca,
		0xca, 0x4d, 0x8f, 0xc8, 0xe9, 0x5e, 0xd0, 0x6f, 0x3a, 0x14, 0x29, 0x99, 0x88, 0x96, 0xb5, 0xe0,
		0xcb, 0x4a, 0x36, 0xc8, 0xae, 0xeb, 0xa9, 0xd5, 0xaa, 0x4d, 0xa1, 0xaf, 0xc8, 0x88, 0x72, 0xef,
		0x9c, 0x60, 0x4b, 0x20, 0x6f, 0x8e, 0x3a, 0xc8, 0x81, 0x9d, 0xd4, 0xd6, 0xe5, 0x40, 0xa0, 0x35,
		0x0b, 0xfd, 0xbc, 0x17, 0x62, 0x87, 0x9b, 0xc6, 0x11, 0x81, 0xc1, 0x6d, 0x45, 0x29, 0x16, 0x10,
		0xcb, 0x83, 0x89, 0x53, 0x1a, 0xd0, 0x70, 0xd4, 0xf1, 0xa2, 0x3a, 0x64, 0x73, 0xb4, 0xe0, 0xd6,
		0xa3, 0xf3, 0xa9, 0xd7, 0x79, 0x42, 0xc9, 0x49, 0x9b, 0x00, 0xd2, 0x94, 0x30, 0x34, 0x9d, 0x38,
		0xf9, 0x02, 0x4f, 0xdc, 0xc1, 0x50, 0xcf, 0x14, 0x3b, 0x99, 0xde, 0x83, 0xfa, 0x90, 0xb1, 0xf8,
		0xb5, 0x40, 0xf9, 0x65, 0x1d, 0x1b, 0x14, 0xf5, 0xa1, 0xf6, 0x8e, 0xe4, 0xd1, 0x71, 0xab, 0x45,
		0xe3, 0xb9, 0xb9, 0xd9, 0xc1, 0x18, 0xd0, 0x6b, 0x3c, 0xbf, 0x9b, 0xdd, 0xdd, 0x29, 0x6a, 0x75,
		0xf6, 0xd6, 0xc1, 0xcd, 0x35, 0x0a, 0x22, 0x68, 0x14, 0x28, 0xb6, 0x06, 0x71, 0xd9, 0x95, 0x59,
		0x70, 0x31, 0x52, 0xb9, 0x31, 0x1c, 0xdd, 0x85, 0x6d, 0x91, 0x8e, 0x61, 0x67, 0xe6, 0x13, 0x64,
		0xc6, 0x41, 0x74, 0xb6, 0x67, 0xe8, 0x38, 0x60, 0x04, 0x28, 0xd4, 0xf9, 0x5e, 0xc8, 0xe6, 0xaf,
		0xdc, 0x73, 0x41, 0xf2, 0xd8, 0xbb, 0xbb, 0x91, 0xe9, 0x23, 0x7b, 0x7d, 0x6b, 0xbd, 0xf1, 0xb8,
		0x40, 0xb2, 0xda, 0x01, 0x5c, 0x65, 0x0d, 0xb8, 0x0c, 0x9b, 0x81, 0x69, 0x07, 0xb8, 0x99, 0x4e,
		0x48, 0xfe, 0x13, 0xe2, 0x01, 0xaf, 0xbc, 0xdb, 0x69, 0xcf, 0x3c, 0xbe, 0xb0, 0xf2, 0x6d, 0x5e,
		0x7a, 0x0c, 0x61, 0x1d, 0xfe, 0xf3, 0x89, 0x15, 0xbf, 0x85, 0x6f, 0x2c, 0xd5, 0xcb, 0xc0, 0x65,
		0x9e, 0x49, 0xa5, 0xeb, 0xfd, 0xeb, 0x32, 0xff, 0xcd, 0x1b, 0xf7, 0xe0, 0xcb, 0x11, 0x5a, 0x12,
		0xb0, 0x2d, 0xbb, 0xb6, 0xa0, 0xe0, 0x92, 0x11, 0x86, 0x21, 0xf0, 0x3f, 0x03, 0x6d, 0x06, 0x63,
		0x9a, 0xcc, 0x65, 0x51, 0x84, 0x7f, 0xab, 0x57, 0x0f, 0xf0, 0x92, 0xa2, 0x22, 0x8e, 0x8d, 0x34,
		0x9f, 0x39, 0x83, 0xbb, 0x23, 0x4d, 0x98, 0x17, 0xc5, 0xe6, 0xa7, 0x03, 0xdc, 0x19, 0xc2, 0xac,
		0x09, 0x07, 0xe3, 0xfd, 0xf1, 0x57, 0x55, 0xb2, 0x50, 0xb5, 0xec, 0xf9, 0x95, 0xbb, 0x44, 0x47,
		0x3a, 0xa4, 0x6d, 0xc6, 0xb8, 0x6d, 0xec, 0xe1, 0x53, 0xed, 0x9d, 0x74, 0x79, 0xcc, 0xf4, 0xb6,
		0x3f, 0x4e, 0x0d, 0x7a, 0xef, 0xe6, 0x79, 0x81, 0x92, 0xd9, 0x9b, 0x80, 0x74, 0x62, 0xad, 0x13,
		0x25, 0xf3, 0x8c, 0x29, 0xef, 0xe3, 0xc9, 0x85, 0x35, 0xdd, 0x1d, 0xbc, 0x59, 0xbf, 0xe3, 0xa8,
		0x2f, 0x81, 0xcf, 0xe8, 0x5c, 0x72, 0x0d, 0xb1, 0xf1, 0x2c, 0x1e, 0xd0, 0x99, 0x1e, 0x3e, 0x56,
		0x81, 0x19, 0x37, 0x4b, 0xec, 0xc9, 0xb6, 0xf5, 0x03, 0xc2, 0x84, 0x8f, 0x6a, 0x64, 0x35, 0x8f,
		0xed, 0x9b, 0x11, 0xc7, 0xea, 0x4f, 0x3b, 0x7a, 0xe3, 0x3d, 0xf5, 0xb0, 0x7c, 0x14, 0x7a, 0xd6,
		0xf4, 0x53, 0x6b, 0x5c, 0x21, 0x8b, 0xd6, 0x9e, 0xbe, 0x3d, 0x8b, 0x62, 0x93, 0x2e, 0x76, 0x6b,
		0x96, 0x10, 0x64, 0x64, 0xfc, 0x1f, 0x3f, 0x99, 0x9f, 0x1a, 0x1b, 0x4e,
	}
	attestation1RawCertInfo = []byte{
		0xFF, 0x54, 0x43, 0x47, 0x80, 0x17, 0x00, 0x22, 0x00, 0x0B, 0xBC, 0x59, 0xF4, 0xDF, 0xD9, 0xA6,
		0xA4, 0x2D, 0xC3, 0xB8, 0x66, 0xAF, 0xF2, 0xDF, 0x0D, 0x19, 0x82, 0x6B, 0xBF, 0x01, 0x4B, 0x67,
		0xAB, 0x0A, 0xD6, 0xEB, 0xB1, 0x76, 0x30, 0x6B, 0x80, 0x07, 0x00, 0x14, 0xAC, 0x9F, 0x3F, 0x05,
		0x69, 0xC6, 0x62, 0xFB, 0x09, 0x14, 0x91, 0xF1, 0xEE, 0xE3, 0x18, 0xC6, 0xF0, 0xC3, 0xDF, 0x9B,
		0x00, 0x00, 0x00, 0x01, 0xB1, 0x5A, 0x48, 0xC7, 0x68, 0x40, 0xF9, 0xE3, 0xD8, 0xF3, 0x9F, 0x05,
		0x01, 0xA9, 0xE0, 0xC4, 0xA5, 0x3F, 0xBB, 0xC4, 0x13, 0x00, 0x22, 0x00, 0x0B, 0x71, 0x21, 0xAE,
		0xBF, 0xA6, 0xB9, 0xAF, 0xD0, 0x70, 0x32, 0xF4, 0x2F, 0x09, 0x25, 0xE0, 0xEC, 0x67, 0x40, 0x8D,
		0xD5, 0x99, 0xA5, 0x7B, 0xFA, 0x0F, 0x80, 0xC7, 0xF1, 0x56, 0x01, 0x08, 0x4F, 0x00, 0x22, 0x00,
		0x0B, 0x01, 0x52, 0x34, 0x79, 0x0F, 0xC0, 0x01, 0x98, 0xCD, 0xBE, 0xB8, 0x54, 0x10, 0xC2, 0xB6,
		0xAB, 0x8C, 0x31, 0xBB, 0x02, 0x05, 0x3A, 0x71, 0xC8, 0x0C, 0x5D, 0x10, 0x96, 0x38, 0x5F, 0xE3,
		0xB4,
	}
	attestation1RawPubArea = []byte{
		0x00, 0x01, 0x00, 0x0B, 0x00, 0x06, 0x04, 0x72, 0x00, 0x20, 0x9D, 0xFF, 0xCB, 0xF3, 0x6C, 0x38,
		0x3A, 0xE6, 0x99, 0xFB, 0x98, 0x68, 0xDC, 0x6D, 0xCB, 0x89, 0xD7, 0x15, 0x38, 0x84, 0xBE, 0x28,
		0x03, 0x92, 0x2C, 0x12, 0x41, 0x58, 0xBF, 0xAD, 0x22, 0xAE, 0x00, 0x10, 0x00, 0x10, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC5, 0xDA, 0x6F, 0x4D, 0x93, 0x57, 0xBD, 0xE2, 0x02, 0xF5,
		0xC5, 0x58, 0xCD, 0x0A, 0x31, 0x56, 0xD2, 0x54, 0xF2, 0xE0, 0xAD, 0x9A, 0xB5, 0x79, 0x31, 0xF9,
		0x82, 0x6B, 0x74, 0x7D, 0xE1, 0xAC, 0x4F, 0x29, 0xD6, 0x07, 0x08, 0x74, 0xDC, 0xE5, 0x79, 0x10,
		0xE1, 0x98, 0x44, 0x49, 0x9D, 0x8E, 0x42, 0x47, 0x03, 0x39, 0xB1, 0x70, 0xD0, 0x22, 0xB5, 0x01,
		0xAB, 0x88, 0xE9, 0xC2, 0xF4, 0xED, 0x30, 0x2E, 0x47, 0x19, 0xC7, 0x0D, 0xEB, 0xE8, 0x84, 0x24,
		0x03, 0xED, 0x9B, 0xDF, 0xC2, 0x27, 0x30, 0xA6, 0x1A, 0x1B, 0x70, 0xF6, 0x16, 0xC5, 0xF1, 0xB7,
		0x00, 0xCA, 0xCF, 0x78, 0x46, 0x13, 0x7D, 0xC4, 0xB2, 0xD4, 0x69, 0xA8, 0xE1, 0x5A, 0xAB, 0x4F,
		0xAD, 0x86, 0x57, 0x08, 0x40, 0x22, 0xD2, 0x8F, 0x44, 0xD9, 0x07, 0x53, 0x23, 0x12, 0x6B, 0x70,
		0x07, 0xC9, 0x81, 0x93, 0x9F, 0xDF, 0x72, 0x4C, 0xAF, 0x4F, 0xBE, 0x47, 0x50, 0x40, 0x43, 0x1A,
		0x4E, 0xA0, 0x64, 0x43, 0x0B, 0xCB, 0x2C, 0xFA, 0xD7, 0xD0, 0x5B, 0xDB, 0x9F, 0x64, 0xB5, 0xB0,
		0xE0, 0x95, 0x2E, 0xCF, 0x86, 0x79, 0x27, 0x3D, 0x6C, 0x6D, 0xFA, 0x81, 0x60, 0x1F, 0x14, 0x50,
		0x33, 0x16, 0xA1, 0x3D, 0x07, 0x82, 0xC3, 0x1A, 0x3E, 0x6B, 0xDD, 0xED, 0x3D, 0x7B, 0xC4, 0x6B,
		0xC1, 0xFA, 0x9B, 0xEF, 0x0D, 0xFF, 0x83, 0xB7, 0xDE, 0xAF, 0x14, 0x6B, 0x58, 0x2C, 0x46, 0x44,
		0x82, 0x1A, 0x3C, 0x62, 0xED, 0xBA, 0xA6, 0xBE, 0x42, 0x2B, 0xF0, 0x4E, 0x43, 0xED, 0xAF, 0x5F,
		0xD3, 0x78, 0x30, 0x86, 0x15, 0x3D, 0x73, 0x61, 0xA2, 0x03, 0x06, 0x1A, 0x62, 0x98, 0xAB, 0x26,
		0xE1, 0x33, 0x7C, 0xA1, 0xC9, 0xED, 0x06, 0x74, 0x1A, 0x59, 0x05, 0x47, 0x79, 0x88, 0xE7, 0x20,
		0x30, 0x4E, 0xAE, 0x18, 0x9D, 0x7F,
	}
	attestationPubKeyRSAN = []byte{
		0xc5, 0xda, 0x6f, 0x4d, 0x93, 0x57, 0xbd, 0xe2,
		0x02, 0xf5, 0xc5, 0x58, 0xcd, 0x0a, 0x31, 0x56,
		0xd2, 0x54, 0xf2, 0xe0, 0xad, 0x9a, 0xb5, 0x79,
		0x31, 0xf9, 0x82, 0x6b, 0x74, 0x7d, 0xe1, 0xac,
		0x4f, 0x29, 0xd6, 0x07, 0x08, 0x74, 0xdc, 0xe5,
		0x79, 0x10, 0xe1, 0x98, 0x44, 0x49, 0x9d, 0x8e,
		0x42, 0x47, 0x03, 0x39, 0xb1, 0x70, 0xd0, 0x22,
		0xb5, 0x01, 0xab, 0x88, 0xe9, 0xc2, 0xf4, 0xed,
		0x30, 0x2e, 0x47, 0x19, 0xc7, 0x0d, 0xeb, 0xe8,
		0x84, 0x24, 0x03, 0xed, 0x9b, 0xdf, 0xc2, 0x27,
		0x30, 0xa6, 0x1a, 0x1b, 0x70, 0xf6, 0x16, 0xc5,
		0xf1, 0xb7, 0x00, 0xca, 0xcf, 0x78, 0x46, 0x13,
		0x7d, 0xc4, 0xb2, 0xd4, 0x69, 0xa8, 0xe1, 0x5a,
		0xab, 0x4f, 0xad, 0x86, 0x57, 0x08, 0x40, 0x22,
		0xd2, 0x8f, 0x44, 0xd9, 0x07, 0x53, 0x23, 0x12,
		0x6b, 0x70, 0x07, 0xc9, 0x81, 0x93, 0x9f, 0xdf,
		0x72, 0x4c, 0xaf, 0x4f, 0xbe, 0x47, 0x50, 0x40,
		0x43, 0x1a, 0x4e, 0xa0, 0x64, 0x43, 0x0b, 0xcb,
		0x2c, 0xfa, 0xd7, 0xd0, 0x5b, 0xdb, 0x9f, 0x64,
		0xb5, 0xb0, 0xe0, 0x95, 0x2e, 0xcf, 0x86, 0x79,
		0x27, 0x3d, 0x6c, 0x6d, 0xfa, 0x81, 0x60, 0x1f,
		0x14, 0x50, 0x33, 0x16, 0xa1, 0x3d, 0x07, 0x82,
		0xc3, 0x1a, 0x3e, 0x6b, 0xdd, 0xed, 0x3d, 0x7b,
		0xc4, 0x6b, 0xc1, 0xfa, 0x9b, 0xef, 0x0d, 0xff,
		0x83, 0xb7, 0xde, 0xaf, 0x14, 0x6b, 0x58, 0x2c,
		0x46, 0x44, 0x82, 0x1a, 0x3c, 0x62, 0xed, 0xba,
		0xa6, 0xbe, 0x42, 0x2b, 0xf0, 0x4e, 0x43, 0xed,
		0xaf, 0x5f, 0xd3, 0x78, 0x30, 0x86, 0x15, 0x3d,
		0x73, 0x61, 0xa2, 0x03, 0x06, 0x1a, 0x62, 0x98,
		0xab, 0x26, 0xe1, 0x33, 0x7c, 0xa1, 0xc9, 0xed,
		0x06, 0x74, 0x1a, 0x59, 0x05, 0x47, 0x79, 0x88,
		0xe7, 0x20, 0x30, 0x4e, 0xae, 0x18, 0x9d, 0x7f,
	}
)

type parseTest struct {
	name                                string
	attestation                         []byte
	wantAttStmtAlg                      x509.SignatureAlgorithm
	wantSig                             []byte
	wantVersion                         string
	wantCredCert                        *x509.Certificate
	wantCACerts                         []*x509.Certificate
	wantECDAAKeyID                      []byte
	wantRawCertInfo                     []byte
	wantCertInfoMagic                   uint32
	wantCertInfoType                    string
	wantCertInfoQualifiedSignerHashType string
	wantCertInfoQualifiedSigner         []byte
	wantExtraDataLength                 int
	wantFirmwareVersionLength           int
	wantCertInfoNameHashType            string
	wantCertInfoNameLength              int
	wantCertInfoQualifiedNameHashType   string
	wantCertInfoQualifiedNameLength     int
	wantRawPubArea                      []byte
	wantPubAreaType                     string
	wantPubAreaNameAlg                  string
	wantFixedTPM                        bool
	wantStClear                         bool
	wantFixedParent                     bool
	wantSensitiveDataOrigin             bool
	wantUserWithAuth                    bool
	wantAdminWithPolicy                 bool
	wantNoDA                            bool
	wantEncryptedDuplication            bool
	wantRestricted                      bool
	wantDecrypt                         bool
	wantSignOrEncrypt                   bool
	wantPubAreaAuthPolicyLength         int
	wantSymmetric                       string
	wantScheme                          string
	wantKeyBits                         uint16
	wantExponent                        uint32
	wantCurveID                         string
	wantKDF                             string
	wantRSAN                            []byte
	wantECCX                            []byte
	wantECCY                            []byte
}

type verifyErrorTest struct {
	name         string
	attestation  []byte
	wantErrorMsg string
}

var parseTests = []parseTest{
	{
		name:                                "attestation 1",
		attestation:                         []byte(attestation1),
		wantAttStmtAlg:                      x509.SHA1WithRSA,
		wantSig:                             attestation1Sig,
		wantVersion:                         "2.0",
		wantCredCert:                        parseCertificate(attestation1CredCert),
		wantCACerts:                         []*x509.Certificate{parseCertificate(attestation1CACert0)},
		wantECDAAKeyID:                      nil,
		wantRawCertInfo:                     attestation1RawCertInfo,
		wantCertInfoMagic:                   uint32(0xff544347),
		wantCertInfoType:                    "TPM_ST_ATTEST_CERTIFY",
		wantCertInfoQualifiedSignerHashType: "TPM_ALG_SHA256",
		wantCertInfoQualifiedSigner: []byte{
			0xbc, 0x59, 0xf4, 0xdf, 0xd9, 0xa6, 0xa4, 0x2d, 0xc3, 0xb8, 0x66, 0xaf, 0xf2, 0xdf, 0x0d, 0x19,
			0x82, 0x6b, 0xbf, 0x01, 0x4b, 0x67, 0xab, 0x0a, 0xd6, 0xeb, 0xb1, 0x76, 0x30, 0x6b, 0x80, 0x07,
		},
		wantExtraDataLength:               20,
		wantFirmwareVersionLength:         8,
		wantCertInfoNameHashType:          "TPM_ALG_SHA256",
		wantCertInfoNameLength:            32,
		wantCertInfoQualifiedNameHashType: "TPM_ALG_SHA256",
		wantCertInfoQualifiedNameLength:   32,
		wantRawPubArea:                    attestation1RawPubArea,
		wantPubAreaType:                   "TPM_ALG_RSA",
		wantPubAreaNameAlg:                "TPM_ALG_SHA256",
		wantFixedTPM:                      true,
		wantStClear:                       false,
		wantFixedParent:                   true,
		wantSensitiveDataOrigin:           true,
		wantUserWithAuth:                  true,
		wantAdminWithPolicy:               false,
		wantNoDA:                          true,
		wantEncryptedDuplication:          false,
		wantRestricted:                    false,
		wantDecrypt:                       true,
		wantSignOrEncrypt:                 true,
		wantPubAreaAuthPolicyLength:       32,
		wantSymmetric:                     "TPM_ALG_NULL",
		wantScheme:                        "TPM_ALG_NULL",
		wantKeyBits:                       uint16(2048),
		wantExponent:                      uint32(65537),
		wantCurveID:                       "",
		wantKDF:                           "",
		wantRSAN:                          attestationPubKeyRSAN,
		wantECCX:                          nil,
		wantECCY:                          nil,
	},
}

var verifyErrorTests = []verifyErrorTest{
	{"certificate signed by unknown authority", []byte(attestation1), "tpm_attestation: failed to verify certificate: x509: certificate signed by unknown authority"},
}

func parseCertificate(data []byte) *x509.Certificate {
	c, err := x509.ParseCertificate(data)
	if err != nil {
		panic(err)
	}
	return c
}

func certificateEqual(c1 *x509.Certificate, c2 *x509.Certificate) bool {
	if c1 == nil && c2 == nil {
		return true
	}
	if (c1 == nil && c2 != nil) || (c1 != nil && c2 == nil) {
		return false
	}
	return bytes.Equal(c1.Raw, c2.Raw)
}

func TestParseTPMAttestation(t *testing.T) {
	for _, tc := range parseTests {
		t.Run(tc.name, func(t *testing.T) {
			var credentialAttestation webauthn.PublicKeyCredentialAttestation
			if err := json.Unmarshal(tc.attestation, &credentialAttestation); err != nil {
				t.Fatalf("failed to unmarshal attestation %s: %q", string(tc.attestation), err)
			}
			attStmt, ok := credentialAttestation.AttStmt.(*tpmAttestationStatement)
			if !ok {
				t.Fatalf("attestation type %T, want *tpmAttestationStatement", credentialAttestation.AttStmt)
			}
			if attStmt.Algorithm != tc.wantAttStmtAlg {
				t.Errorf("attestation alg %s, want %s", attStmt.Algorithm, tc.wantAttStmtAlg)
			}
			if !bytes.Equal(attStmt.rawSig, tc.wantSig) {
				t.Errorf("attestation sig %v, want %v", attStmt.rawSig, tc.wantSig)
			}
			if attStmt.ver != tc.wantVersion {
				t.Errorf("attestation version %s, want %s", attStmt.ver, tc.wantVersion)
			}
			if !certificateEqual(attStmt.aikCert, tc.wantCredCert) {
				t.Errorf("attestation cred cert %v, want %v", attStmt.aikCert, tc.wantCredCert)
			}
			if len(attStmt.caCerts) != len(tc.wantCACerts) {
				t.Errorf("attestation has %d ca certificates, want %d", len(attStmt.caCerts), len(tc.wantCACerts))
			} else {
				for i, c := range attStmt.caCerts {
					if !bytes.Equal(c.Raw, tc.wantCACerts[i].Raw) {
						t.Errorf("attestation ca cert %d %v, want %v", i, c, tc.wantCACerts[i])
					}
				}
			}
			if !reflect.DeepEqual(attStmt.ecdaaKeyID, tc.wantECDAAKeyID) {
				t.Errorf("attestation ecdaaKeyID %v, want %v", attStmt.ecdaaKeyID, tc.wantECDAAKeyID)
			}

			// check attestation statement certInfo
			if !bytes.Equal(attStmt.rawCerInfo, tc.wantRawCertInfo) {
				t.Errorf("attestation raw cert info %v, want %v", attStmt.rawCerInfo, tc.wantRawCertInfo)
			}
			if attStmt.certInfo.magic != tc.wantCertInfoMagic {
				t.Errorf("attestation cert info magic %v, want %v", attStmt.certInfo.magic, tc.wantCertInfoMagic)
			}
			if attStmt.certInfo.typ != tc.wantCertInfoType {
				t.Errorf("attestation cert info type %s, want %s", attStmt.certInfo.typ, tc.wantCertInfoType)
			}
			if attStmt.certInfo.qualifiedSignerHashType != tc.wantCertInfoQualifiedSignerHashType {
				t.Errorf("attestation cert info qualified signer hash type %s, want %s", attStmt.certInfo.qualifiedSignerHashType, tc.wantCertInfoQualifiedSignerHashType)
			}
			if !bytes.Equal(attStmt.certInfo.qualifiedSigner, tc.wantCertInfoQualifiedSigner) {
				t.Errorf("attestation cert info qualified signer %v, want %v", attStmt.certInfo.qualifiedSigner, tc.wantCertInfoQualifiedSigner)
			}
			if len(attStmt.certInfo.extraData) != tc.wantExtraDataLength {
				t.Errorf("attestation cert info extra data length %d, want %d", len(attStmt.certInfo.extraData), tc.wantExtraDataLength)
			}
			// ignore clock field, not used
			if len(attStmt.certInfo.firmwareVersion) != tc.wantFirmwareVersionLength {
				t.Errorf("attestation cert info firmware version length %d, want %d", len(attStmt.certInfo.firmwareVersion), tc.wantFirmwareVersionLength)
			}
			if attStmt.certInfo.nameHashType != tc.wantCertInfoNameHashType {
				t.Errorf("attestation cert info name hash type %s, want %s", attStmt.certInfo.nameHashType, tc.wantCertInfoNameHashType)
			}
			if len(attStmt.certInfo.name) != tc.wantCertInfoNameLength {
				t.Errorf("attestation cert info name length %d, want %d", len(attStmt.certInfo.name), tc.wantCertInfoNameLength)
			}
			if attStmt.certInfo.qualifiedNameHashType != tc.wantCertInfoQualifiedNameHashType {
				t.Errorf("attestation cert info qualified name hash type %s, want %s", attStmt.certInfo.qualifiedNameHashType, tc.wantCertInfoQualifiedNameHashType)
			}
			if len(attStmt.certInfo.qualifiedName) != tc.wantCertInfoQualifiedNameLength {
				t.Errorf("attestation cert info qualified name length %d, want %d", len(attStmt.certInfo.qualifiedName), tc.wantCertInfoQualifiedNameLength)
			}

			// check attestation statement pub area
			if !bytes.Equal(attStmt.rawPubArea, tc.wantRawPubArea) {
				t.Errorf("attestation raw pub area %v, want %v", attStmt.rawPubArea, tc.wantRawPubArea)
			}
			if attStmt.pubArea.typ != tc.wantPubAreaType {
				t.Errorf("attestation pub area type %s, want %s", attStmt.pubArea.typ, tc.wantPubAreaType)
			}
			if attStmt.pubArea.nameAlg != tc.wantPubAreaNameAlg {
				t.Errorf("attestation pub area name alg %s, want %s", attStmt.pubArea.nameAlg, tc.wantPubAreaNameAlg)
			}
			if attStmt.pubArea.objectAttributes.fixedTPM != tc.wantFixedTPM {
				t.Errorf("attestation object attributes fixed TPM %t, want %t", attStmt.pubArea.objectAttributes.fixedTPM, tc.wantFixedTPM)
			}
			if attStmt.pubArea.objectAttributes.stClear != tc.wantStClear {
				t.Errorf("attestation object attributes st clear %t, want %t", attStmt.pubArea.objectAttributes.stClear, tc.wantStClear)
			}
			if attStmt.pubArea.objectAttributes.fixedParent != tc.wantFixedParent {
				t.Errorf("attestation object attributes fixed parent %t, want %t", attStmt.pubArea.objectAttributes.fixedParent, tc.wantFixedParent)
			}
			if attStmt.pubArea.objectAttributes.sensitiveDataOrigin != tc.wantSensitiveDataOrigin {
				t.Errorf("attestation object attributes sensitive data origin %t, want %t", attStmt.pubArea.objectAttributes.sensitiveDataOrigin, tc.wantSensitiveDataOrigin)
			}
			if attStmt.pubArea.objectAttributes.userWithAuth != tc.wantUserWithAuth {
				t.Errorf("attestation object attributes user with auth %t, want %t", attStmt.pubArea.objectAttributes.userWithAuth, tc.wantUserWithAuth)
			}
			if attStmt.pubArea.objectAttributes.adminWithPolicy != tc.wantAdminWithPolicy {
				t.Errorf("attestation object attributes admin with policy %t, want %t", attStmt.pubArea.objectAttributes.adminWithPolicy, tc.wantAdminWithPolicy)
			}
			if attStmt.pubArea.objectAttributes.noDA != tc.wantNoDA {
				t.Errorf("attestation object attributes no da %t, want %t", attStmt.pubArea.objectAttributes.noDA, tc.wantNoDA)
			}
			if attStmt.pubArea.objectAttributes.encryptedDuplication != tc.wantEncryptedDuplication {
				t.Errorf("attestation object attributes encrypted duplication %t, want %t", attStmt.pubArea.objectAttributes.encryptedDuplication, tc.wantEncryptedDuplication)
			}
			if attStmt.pubArea.objectAttributes.restricted != tc.wantRestricted {
				t.Errorf("attestation object attributes restricted %t, want %t", attStmt.pubArea.objectAttributes.restricted, tc.wantRestricted)
			}
			if attStmt.pubArea.objectAttributes.decrypt != tc.wantDecrypt {
				t.Errorf("attestation object attributes decrypt %t, want %t", attStmt.pubArea.objectAttributes.decrypt, tc.wantDecrypt)
			}
			if attStmt.pubArea.objectAttributes.signOrEncrypt != tc.wantSignOrEncrypt {
				t.Errorf("attestation object attributes sign or encrypt %t, want %t", attStmt.pubArea.objectAttributes.signOrEncrypt, tc.wantSignOrEncrypt)
			}
			if len(attStmt.pubArea.authPolicy) != tc.wantPubAreaAuthPolicyLength {
				t.Errorf("attestation pub area auth policy length %d, want %d", len(attStmt.pubArea.authPolicy), tc.wantPubAreaAuthPolicyLength)
			}
			if attStmt.pubArea.parameters.symmetric != tc.wantSymmetric {
				t.Errorf("attestation pub area symmetric %s, want %s", attStmt.pubArea.parameters.symmetric, tc.wantSymmetric)
			}
			if attStmt.pubArea.parameters.scheme != tc.wantScheme {
				t.Errorf("attestation pub area scheme %s, want %s", attStmt.pubArea.parameters.scheme, tc.wantScheme)
			}
			if attStmt.pubArea.parameters.keyBits != tc.wantKeyBits {
				t.Errorf("attestation pub area key bits %d, want %d", attStmt.pubArea.parameters.keyBits, tc.wantKeyBits)
			}
			if attStmt.pubArea.parameters.exponent != tc.wantExponent {
				t.Errorf("attestation pub area exponent %d, want %d", attStmt.pubArea.parameters.exponent, tc.wantExponent)
			}
			if attStmt.pubArea.parameters.curveID != tc.wantCurveID {
				t.Errorf("attestation pub area curve id %s, want %s", attStmt.pubArea.parameters.curveID, tc.wantCurveID)
			}
			if attStmt.pubArea.parameters.kdf != tc.wantKDF {
				t.Errorf("attestation pub area kdf %s, want %s", attStmt.pubArea.parameters.kdf, tc.wantKDF)
			}
			if !bytes.Equal(attStmt.pubArea.rsaN, tc.wantRSAN) {
				t.Errorf("attestation pub area rsa n 0x%x, want 0x%x", attStmt.pubArea.rsaN, tc.wantRSAN)
			}
			if !bytes.Equal(attStmt.pubArea.eccX, tc.wantECCX) {
				t.Errorf("attestation pub area ecc x 0x%x, want 0x%x", attStmt.pubArea.eccX, tc.wantECCX)
			}
			if !bytes.Equal(attStmt.pubArea.eccY, tc.wantECCY) {
				t.Errorf("attestation pub area ecc y 0x%x, want 0x%x", attStmt.pubArea.eccY, tc.wantECCY)
			}
		})
	}
}

func TestVerifyTPMAttestationError(t *testing.T) {
	for _, tc := range verifyErrorTests {
		t.Run(tc.name, func(t *testing.T) {
			var credentialAttestation webauthn.PublicKeyCredentialAttestation
			if err := json.Unmarshal(tc.attestation, &credentialAttestation); err != nil {
				t.Fatalf("failed to unmarshal attestation %s: %q", string(tc.attestation), err)
			}
			if _, _, err := credentialAttestation.VerifyAttestationStatement(); err == nil {
				t.Errorf("Verify() returns no error, want error containing substring %q", tc.wantErrorMsg)
			} else if !strings.Contains(err.Error(), tc.wantErrorMsg) {
				t.Errorf("Verify() returns error %q,  want error containing substring %q", err, tc.wantErrorMsg)
			}
		})
	}
}
