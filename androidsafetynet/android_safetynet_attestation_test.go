/*
Copyright 2019-present Faye Amacker.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package androidsafetynet

import (
	"bytes"
	"crypto/x509"
	"encoding/json"
	"encoding/pem"
	"testing"

	"github.com/nadroz/webauthn"
)

var (
	// Test data from herrjemand's verify.safetynet.webauthn.js (2019) at https://gist.github.com/herrjemand/4c7850e53ba4a04cc9e000b41b8e6f8f
	attestation1 = `{
		"rawId": "AZD7huwZVx7aW1efRa6Uq3JTQNorj3qA9yrLINXEcgvCQYtWiSQa1eOIVrXfCmip6MzP8KaITOvRLjy3TUHO7_c",
		"id":    "AZD7huwZVx7aW1efRa6Uq3JTQNorj3qA9yrLINXEcgvCQYtWiSQa1eOIVrXfCmip6MzP8KaITOvRLjy3TUHO7_c",
		"response": {
			"attestationObject": "o2NmbXRxYW5kcm9pZC1zYWZldHluZXRnYXR0U3RtdKJjdmVyaDE0MzY2MDE5aHJlc3BvbnNlWRS9ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbmcxWXlJNld5Sk5TVWxHYTJwRFEwSkljV2RCZDBsQ1FXZEpVVkpZY205T01GcFBaRkpyUWtGQlFVRkJRVkIxYm5wQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFSkRUVkZ6ZDBOUldVUldVVkZIUlhkS1ZsVjZSV1ZOUW5kSFFURlZSVU5vVFZaU01qbDJXako0YkVsR1VubGtXRTR3U1VaT2JHTnVXbkJaTWxaNlRWSk5kMFZSV1VSV1VWRkVSWGR3U0ZaR1RXZFJNRVZuVFZVNGVFMUNORmhFVkVVMFRWUkJlRTFFUVROTlZHc3dUbFp2V0VSVVJUVk5WRUYzVDFSQk0wMVVhekJPVm05M1lrUkZURTFCYTBkQk1WVkZRbWhOUTFaV1RYaEZla0ZTUW1kT1ZrSkJaMVJEYTA1b1lrZHNiV0l6U25WaFYwVjRSbXBCVlVKblRsWkNRV05VUkZVeGRtUlhOVEJaVjJ4MVNVWmFjRnBZWTNoRmVrRlNRbWRPVmtKQmIxUkRhMlIyWWpKa2MxcFRRazFVUlUxNFIzcEJXa0puVGxaQ1FVMVVSVzFHTUdSSFZucGtRelZvWW0xU2VXSXliR3RNYlU1MllsUkRRMEZUU1hkRVVWbEtTMjlhU1doMlkwNUJVVVZDUWxGQlJHZG5SVkJCUkVORFFWRnZRMmRuUlVKQlRtcFlhM293WlVzeFUwVTBiU3N2UnpWM1QyOHJXRWRUUlVOeWNXUnVPRGh6UTNCU04yWnpNVFJtU3pCU2FETmFRMWxhVEVaSWNVSnJOa0Z0V2xaM01rczVSa2N3VHpseVVsQmxVVVJKVmxKNVJUTXdVWFZ1VXpsMVowaEROR1ZuT1c5MmRrOXRLMUZrV2pKd09UTllhSHAxYmxGRmFGVlhXRU40UVVSSlJVZEtTek5UTW1GQlpucGxPVGxRVEZNeU9XaE1ZMUYxV1ZoSVJHRkROMDlhY1U1dWIzTnBUMGRwWm5NNGRqRnFhVFpJTDNob2JIUkRXbVV5YkVvck4wZDFkSHBsZUV0d2VIWndSUzkwV2xObVlsazVNRFZ4VTJ4Q2FEbG1jR293TVRWamFtNVJSbXRWYzBGVmQyMUxWa0ZWZFdWVmVqUjBTMk5HU3pSd1pYWk9UR0Y0UlVGc0swOXJhV3hOZEVsWlJHRmpSRFZ1Wld3MGVFcHBlWE0wTVROb1lXZHhWekJYYUdnMVJsQXpPV2hIYXpsRkwwSjNVVlJxWVhwVGVFZGtkbGd3YlRaNFJsbG9hQzh5VmsxNVdtcFVORXQ2VUVwRlEwRjNSVUZCWVU5RFFXeG5kMmRuU2xWTlFUUkhRVEZWWkVSM1JVSXZkMUZGUVhkSlJtOUVRVlJDWjA1V1NGTlZSVVJFUVV0Q1oyZHlRbWRGUmtKUlkwUkJWRUZOUW1kT1ZraFNUVUpCWmpoRlFXcEJRVTFDTUVkQk1WVmtSR2RSVjBKQ1VYRkNVWGRIVjI5S1FtRXhiMVJMY1hWd2J6UlhObmhVTm1veVJFRm1RbWRPVmtoVFRVVkhSRUZYWjBKVFdUQm1hSFZGVDNaUWJTdDRaMjU0YVZGSE5rUnlabEZ1T1V0NlFtdENaMmR5UW1kRlJrSlJZMEpCVVZKWlRVWlpkMHAzV1VsTGQxbENRbEZWU0UxQlIwZEhNbWd3WkVoQk5reDVPWFpaTTA1M1RHNUNjbUZUTlc1aU1qbHVUREprTUdONlJuWk5WRUZ5UW1kbmNrSm5SVVpDVVdOM1FXOVpabUZJVWpCalJHOTJURE5DY21GVE5XNWlNamx1VERKa2VtTnFTWFpTTVZKVVRWVTRlRXh0VG5sa1JFRmtRbWRPVmtoU1JVVkdha0ZWWjJoS2FHUklVbXhqTTFGMVdWYzFhMk50T1hCYVF6VnFZakl3ZDBsUldVUldVakJuUWtKdmQwZEVRVWxDWjFwdVoxRjNRa0ZuU1hkRVFWbExTM2RaUWtKQlNGZGxVVWxHUVhwQmRrSm5UbFpJVWpoRlMwUkJiVTFEVTJkSmNVRm5hR2cxYjJSSVVuZFBhVGgyV1ROS2MweHVRbkpoVXpWdVlqSTVia3d3WkZWVmVrWlFUVk0xYW1OdGQzZG5aMFZGUW1kdmNrSm5SVVZCWkZvMVFXZFJRMEpKU0RGQ1NVaDVRVkJCUVdSM1EydDFVVzFSZEVKb1dVWkpaVGRGTmt4TldqTkJTMUJFVjFsQ1VHdGlNemRxYW1RNE1FOTVRVE5qUlVGQlFVRlhXbVJFTTFCTVFVRkJSVUYzUWtsTlJWbERTVkZEVTFwRFYyVk1Tblp6YVZaWE5rTm5LMmRxTHpsM1dWUktVbnAxTkVocGNXVTBaVmswWXk5dGVYcHFaMGxvUVV4VFlta3ZWR2g2WTNweGRHbHFNMlJyTTNaaVRHTkpWek5NYkRKQ01HODNOVWRSWkdoTmFXZGlRbWRCU0ZWQlZtaFJSMjFwTDFoM2RYcFVPV1ZIT1ZKTVNTdDRNRm95ZFdKNVdrVldla0UzTlZOWlZtUmhTakJPTUVGQlFVWnRXRkU1ZWpWQlFVRkNRVTFCVW1wQ1JVRnBRbU5EZDBFNWFqZE9WRWRZVURJM09IbzBhSEl2ZFVOSWFVRkdUSGx2UTNFeVN6QXJlVXhTZDBwVlltZEpaMlk0WjBocWRuQjNNbTFDTVVWVGFuRXlUMll6UVRCQlJVRjNRMnR1UTJGRlMwWlZlVm8zWmk5UmRFbDNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRVVJuWjBWQ1FVazVibFJtVWt0SlYyZDBiRmRzTTNkQ1REVTFSVlJXTm10aGVuTndhRmN4ZVVGak5VUjFiVFpZVHpReGExcDZkMG8yTVhkS2JXUlNVbFF2VlhORFNYa3hTMFYwTW1Nd1JXcG5iRzVLUTBZeVpXRjNZMFZYYkV4UldUSllVRXg1Um1wclYxRk9ZbE5vUWpGcE5GY3lUbEpIZWxCb2RETnRNV0kwT1doaWMzUjFXRTAyZEZnMVEzbEZTRzVVYURoQ2IyMDBMMWRzUm1sb2VtaG5iamd4Ukd4a2IyZDZMMHN5VlhkTk5sTTJRMEl2VTBWNGEybFdabllyZW1KS01ISnFkbWM1TkVGc1pHcFZabFYzYTBrNVZrNU5ha1ZRTldVNGVXUkNNMjlNYkRabmJIQkRaVVkxWkdkbVUxZzBWVGw0TXpWdmFpOUpTV1F6VlVVdlpGQndZaTl4WjBkMmMydG1aR1Y2ZEcxVmRHVXZTMU50Y21sM1kyZFZWMWRsV0daVVlra3plbk5wYTNkYVltdHdiVkpaUzIxcVVHMW9kalJ5YkdsNlIwTkhkRGhRYmpod2NUaE5Na3RFWmk5UU0ydFdiM1F6WlRFNFVUMGlMQ0pOU1VsRlUycERRMEY2UzJkQmQwbENRV2RKVGtGbFR6QnRjVWRPYVhGdFFrcFhiRkYxUkVGT1FtZHJjV2hyYVVjNWR6QkNRVkZ6UmtGRVFrMU5VMEYzU0dkWlJGWlJVVXhGZUdSSVlrYzVhVmxYZUZSaFYyUjFTVVpLZG1JelVXZFJNRVZuVEZOQ1UwMXFSVlJOUWtWSFFURlZSVU5vVFV0U01uaDJXVzFHYzFVeWJHNWlha1ZVVFVKRlIwRXhWVVZCZUUxTFVqSjRkbGx0Um5OVk1teHVZbXBCWlVaM01IaE9la0V5VFZSVmQwMUVRWGRPUkVwaFJuY3dlVTFVUlhsTlZGVjNUVVJCZDA1RVNtRk5SVWw0UTNwQlNrSm5UbFpDUVZsVVFXeFdWRTFTTkhkSVFWbEVWbEZSUzBWNFZraGlNamx1WWtkVloxWklTakZqTTFGblZUSldlV1J0YkdwYVdFMTRSWHBCVWtKblRsWkNRVTFVUTJ0a1ZWVjVRa1JSVTBGNFZIcEZkMmRuUldsTlFUQkhRMU54UjFOSllqTkVVVVZDUVZGVlFVRTBTVUpFZDBGM1oyZEZTMEZ2U1VKQlVVUlJSMDA1UmpGSmRrNHdOWHByVVU4NUszUk9NWEJKVW5aS2VucDVUMVJJVnpWRWVrVmFhRVF5WlZCRGJuWlZRVEJSYXpJNFJtZEpRMlpMY1VNNVJXdHpRelJVTW1aWFFsbHJMMnBEWmtNelVqTldXazFrVXk5a1RqUmFTME5GVUZwU2NrRjZSSE5wUzFWRWVsSnliVUpDU2pWM2RXUm5lbTVrU1UxWlkweGxMMUpIUjBac05YbFBSRWxMWjJwRmRpOVRTa2d2VlV3clpFVmhiSFJPTVRGQ2JYTkxLMlZSYlUxR0t5dEJZM2hIVG1oeU5UbHhUUzg1YVd3M01Va3laRTQ0UmtkbVkyUmtkM1ZoWldvMFlsaG9jREJNWTFGQ1ltcDRUV05KTjBwUU1HRk5NMVEwU1N0RWMyRjRiVXRHYzJKcWVtRlVUa001ZFhwd1JteG5UMGxuTjNKU01qVjRiM2x1VlhoMk9IWk9iV3R4TjNwa1VFZElXR3Q0VjFrM2IwYzVhaXRLYTFKNVFrRkNhemRZY2twbWIzVmpRbHBGY1VaS1NsTlFhemRZUVRCTVMxY3dXVE42Tlc5Nk1rUXdZekYwU2t0M1NFRm5UVUpCUVVkcVoyZEZlazFKU1VKTWVrRlBRbWRPVmtoUk9FSkJaamhGUWtGTlEwRlpXWGRJVVZsRVZsSXdiRUpDV1hkR1FWbEpTM2RaUWtKUlZVaEJkMFZIUTBOelIwRlJWVVpDZDAxRFRVSkpSMEV4VldSRmQwVkNMM2RSU1UxQldVSkJaamhEUVZGQmQwaFJXVVJXVWpCUFFrSlpSVVpLYWxJclJ6UlJOamdyWWpkSFEyWkhTa0ZpYjA5ME9VTm1NSEpOUWpoSFFURlZaRWwzVVZsTlFtRkJSa3AyYVVJeFpHNUlRamRCWVdkaVpWZGlVMkZNWkM5alIxbFpkVTFFVlVkRFEzTkhRVkZWUmtKM1JVSkNRMnQzU25wQmJFSm5aM0pDWjBWR1FsRmpkMEZaV1ZwaFNGSXdZMFJ2ZGt3eU9XcGpNMEYxWTBkMGNFeHRaSFppTW1OMldqTk9lVTFxUVhsQ1owNVdTRkk0UlV0NlFYQk5RMlZuU21GQmFtaHBSbTlrU0ZKM1QyazRkbGt6U25OTWJrSnlZVk0xYm1JeU9XNU1NbVI2WTJwSmRsb3pUbmxOYVRWcVkyMTNkMUIzV1VSV1VqQm5Ra1JuZDA1cVFUQkNaMXB1WjFGM1FrRm5TWGRMYWtGdlFtZG5ja0puUlVaQ1VXTkRRVkpaWTJGSVVqQmpTRTAyVEhrNWQyRXlhM1ZhTWpsMlduazVlVnBZUW5aak1td3dZak5LTlV4NlFVNUNaMnR4YUd0cFJ6bDNNRUpCVVhOR1FVRlBRMEZSUlVGSGIwRXJUbTV1TnpoNU5uQlNhbVE1V0d4UlYwNWhOMGhVWjJsYUwzSXpVazVIYTIxVmJWbElVRkZ4TmxOamRHazVVRVZoYW5aM1VsUXlhVmRVU0ZGeU1ESm1aWE54VDNGQ1dUSkZWRlYzWjFwUksyeHNkRzlPUm5ab2MwODVkSFpDUTA5SllYcHdjM2RYUXpsaFNqbDRhblUwZEZkRVVVZzRUbFpWTmxsYVdpOVlkR1ZFVTBkVk9WbDZTbkZRYWxrNGNUTk5SSGh5ZW0xeFpYQkNRMlkxYnpodGR5OTNTalJoTWtjMmVIcFZjalpHWWpaVU9FMWpSRTh5TWxCTVVrdzJkVE5OTkZSNmN6TkJNazB4YWpaaWVXdEtXV2s0ZDFkSlVtUkJka3RNVjFwMUwyRjRRbFppZWxsdGNXMTNhMjAxZWt4VFJGYzFia2xCU21KRlRFTlJRMXAzVFVnMU5uUXlSSFp4YjJaNGN6WkNRbU5EUmtsYVZWTndlSFUyZURaMFpEQldOMU4yU2tORGIzTnBjbE50U1dGMGFpODVaRk5UVmtSUmFXSmxkRGh4THpkVlN6UjJORnBWVGpnd1lYUnVXbm94ZVdjOVBTSmRmUS5leUp1YjI1alpTSTZJa2tyVW5GVE1IVnZlSEpKYld0MkwxTXJOa3hZVlhwMlNrVTJRVkZ5UkRGNGJEQjVTM2Q0TW0xS1NUUTlJaXdpZEdsdFpYTjBZVzF3VFhNaU9qRTFOREV6TXpZM01qazVNekFzSW1Gd2ExQmhZMnRoWjJWT1lXMWxJam9pWTI5dExtZHZiMmRzWlM1aGJtUnliMmxrTG1kdGN5SXNJbUZ3YTBScFoyVnpkRk5vWVRJMU5pSTZJbVZSWXl0MmVsVmpaSGd3UmxaT1RIWllTSFZIY0VRd0sxSTRNRGR6VlVWMmNDdEtaV3hsV1ZwemFVRTlJaXdpWTNSelVISnZabWxzWlUxaGRHTm9JanAwY25WbExDSmhjR3REWlhKMGFXWnBZMkYwWlVScFoyVnpkRk5vWVRJMU5pSTZXeUk0VURGelZ6QkZVRXBqYzJ4M04xVjZVbk5wV0V3Mk5IY3JUelV3UldRclVrSkpRM1JoZVRGbk1qUk5QU0pkTENKaVlYTnBZMGx1ZEdWbmNtbDBlU0k2ZEhKMVpYMC5XTGV3N1FqemM2QTZHeVZfck1VRlhSZzEyVEtSb0ROLXJhSG9NSzY3SGdCbk5Yc0QtOUtjaG1TVFpBWWZfLXFKZE1wN1BhYml4VnF4ZDdDQzFxTFBPaUZYLVd5RGJzZlltNmRabFFiODhSd2R6LVEyUVJfTDFCN3NTaURlV1lTeDZmMm10MlQ0WXQ4MjNGNHNGYk8zVlpXM1RacmRRLXBlMVFWMEZYTTRUQ1dXbWVVRUUyWEJmaFVYbHJ5MEFicWhnQUNsWWFGcG8xdUhXUjhEOFkweDhtUDFocmVTMUtNN2NfT01lc1E5dl9mdlBETUE0SEUtYlpZbHZrRVV2VmFCeFpWVzB2SXN4eWxiWllSNVMxSjIwSXRPLV9kSDFERWRkY1kzcmc3bzd6RlJGSGFnd0QyN3dCMzlCTmk4cVNVcG1heEk1VWhrNE04X3BDSWtmLXBwaUFoYXV0aERhdGFYxZVpCI8ezuMjKVQDXb0Q18rjkTBaJ1G1WbuP18uyKb3URQAAAAAAAAAAAAAAAAAAAAAAAAAAAEEBkPuG7BlXHtpbV59FrpSrclNA2iuPeoD3Kssg1cRyC8JBi1aJJBrV44hWtd8KaKnozM_wpohM69EuPLdNQc7v96UBAgMmIAEhWCBVEWSlJerLbRupcvBaXA5Cqpp1Ba46HZTH-dqgmeMCYSJYIIlzYLPXaVavxbpZ4G6ZJWJ6hwW_NgiKAHpSNL8Bwf_d",
			"clientDataJSON":    "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiVGY2NWJTNkQ1dGVtaDJCd3ZwdHFnQlBiMjVpWkRSeGp3QzVhbnM5MUlJSkRyY3JPcG5XVEs0TFZnRmplVVY0R0RNZTQ0dzhTSTVOc1pzc0lYVFV2RGciLCJvcmlnaW4iOiJodHRwczpcL1wvd2ViYXV0aG4ub3JnIiwiYW5kcm9pZFBhY2thZ2VOYW1lIjoiY29tLmFuZHJvaWQuY2hyb21lIn0"
		},
		"type": "public-key"
	}`
	attestation1Sig = []byte{
		0x58, 0xb7, 0xb0, 0xed, 0x08, 0xf3, 0x73, 0xa0, 0x3a, 0x1b, 0x25, 0x7f, 0xac, 0xc5, 0x05, 0x5d,
		0x18, 0x35, 0xd9, 0x32, 0x91, 0xa0, 0x33, 0x7e, 0xad, 0xa1, 0xe8, 0x30, 0xae, 0xbb, 0x1e, 0x00,
		0x67, 0x35, 0x7b, 0x03, 0xfb, 0xd2, 0x9c, 0x86, 0x64, 0x93, 0x64, 0x06, 0x1f, 0xff, 0xea, 0x89,
		0x74, 0xca, 0x7b, 0x3d, 0xa6, 0xe2, 0xc5, 0x5a, 0xb1, 0x77, 0xb0, 0x82, 0xd6, 0xa2, 0xcf, 0x3a,
		0x21, 0x57, 0xf9, 0x6c, 0x83, 0x6e, 0xc7, 0xd8, 0x9b, 0xa7, 0x59, 0x95, 0x06, 0xfc, 0xf1, 0x1c,
		0x1d, 0xcf, 0xe4, 0x36, 0x41, 0x1f, 0xcb, 0xd4, 0x1e, 0xec, 0x4a, 0x20, 0xde, 0x59, 0x84, 0xb1,
		0xe9, 0xfd, 0xa6, 0xb7, 0x64, 0xf8, 0x62, 0xdf, 0x36, 0xdc, 0x5e, 0x2c, 0x15, 0xb3, 0xb7, 0x55,
		0x95, 0xb7, 0x4d, 0x9a, 0xdd, 0x43, 0xea, 0x5e, 0xd5, 0x05, 0x74, 0x15, 0x73, 0x38, 0x4c, 0x25,
		0x96, 0x99, 0xe5, 0x04, 0x13, 0x65, 0xc1, 0x7e, 0x15, 0x17, 0x96, 0xbc, 0xb4, 0x01, 0xba, 0xa1,
		0x80, 0x00, 0xa5, 0x61, 0xa1, 0x69, 0xa3, 0x5b, 0x87, 0x59, 0x1f, 0x03, 0xf1, 0x8d, 0x31, 0xf2,
		0x63, 0xf5, 0x86, 0xb7, 0x92, 0xd4, 0xa3, 0x3b, 0x73, 0xf3, 0x8c, 0x7a, 0xc4, 0x3d, 0xbf, 0xf7,
		0xef, 0x3c, 0x33, 0x00, 0xe0, 0x71, 0x3e, 0x6d, 0x96, 0x25, 0xbe, 0x41, 0x14, 0xbd, 0x56, 0x81,
		0xc5, 0x95, 0x56, 0xd2, 0xf2, 0x2c, 0xc7, 0x29, 0x5b, 0x65, 0x84, 0x79, 0x4b, 0x52, 0x76, 0xd0,
		0x8b, 0x4e, 0xfb, 0xf7, 0x47, 0xd4, 0x31, 0x1d, 0x75, 0xc6, 0x37, 0xae, 0x0e, 0xe8, 0xef, 0x31,
		0x51, 0x14, 0x76, 0xa0, 0xc0, 0x3d, 0xbb, 0xc0, 0x1d, 0xfd, 0x04, 0xd8, 0xbc, 0xa9, 0x25, 0x29,
		0x99, 0xac, 0x48, 0xe5, 0x48, 0x64, 0xe0, 0xcf, 0x3f, 0xa4, 0x22, 0x24, 0x7f, 0xea, 0x69, 0x88,
	}
	attestation1CredCert = []byte{
		0x30, 0x82, 0x05, 0x92, 0x30, 0x82, 0x04, 0x7a, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x45,
		0x7a, 0xe8, 0x37, 0x46, 0x4e, 0x75, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0xee, 0x9f, 0x30,
		0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x42,
		0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1e, 0x30,
		0x1c, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x15, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54,
		0x72, 0x75, 0x73, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x31, 0x13, 0x30,
		0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0a, 0x47, 0x54, 0x53, 0x20, 0x43, 0x41, 0x20, 0x31,
		0x4f, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x38, 0x31, 0x30, 0x31, 0x30, 0x30, 0x37, 0x31, 0x39,
		0x34, 0x35, 0x5a, 0x17, 0x0d, 0x31, 0x39, 0x31, 0x30, 0x30, 0x39, 0x30, 0x37, 0x31, 0x39, 0x34,
		0x35, 0x5a, 0x30, 0x6c, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55,
		0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x43, 0x61, 0x6c, 0x69,
		0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13,
		0x0d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x56, 0x69, 0x65, 0x77, 0x31, 0x13,
		0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20,
		0x4c, 0x4c, 0x43, 0x31, 0x1b, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x12, 0x61, 0x74,
		0x74, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
		0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
		0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
		0x00, 0xd8, 0xd7, 0x93, 0x3d, 0x1e, 0x2b, 0x54, 0x84, 0xe2, 0x6f, 0xbf, 0x1b, 0x9c, 0x0e, 0xa3,
		0xe5, 0xc6, 0x48, 0x40, 0xab, 0xa9, 0xd9, 0xfc, 0xf2, 0xc0, 0xa9, 0x47, 0xb7, 0xec, 0xd7, 0x87,
		0xca, 0xd1, 0x18, 0x77, 0x64, 0x26, 0x19, 0x2c, 0x51, 0xea, 0x06, 0x4e, 0x80, 0x99, 0x95, 0x70,
		0xd8, 0xaf, 0x45, 0x1b, 0x43, 0xbd, 0xad, 0x13, 0xde, 0x40, 0x32, 0x15, 0x47, 0x21, 0x37, 0xd1,
		0x0b, 0xa7, 0x4b, 0xdb, 0xa0, 0x1c, 0x2e, 0x1e, 0x83, 0xda, 0x2f, 0xbc, 0xe9, 0xbe, 0x41, 0xd6,
		0x76, 0xa7, 0xdd, 0xd7, 0x87, 0x3b, 0xa7, 0x40, 0x48, 0x54, 0x59, 0x70, 0xb1, 0x00, 0x32, 0x04,
		0x18, 0x92, 0xb7, 0x4b, 0x66, 0x80, 0x7f, 0x37, 0xbd, 0xf4, 0xf2, 0xd2, 0xdb, 0xd8, 0x4b, 0x71,
		0x0b, 0x98, 0x5c, 0x70, 0xda, 0x0b, 0xb3, 0x99, 0xa8, 0xd9, 0xe8, 0xb2, 0x23, 0x86, 0x89, 0xfb,
		0x3c, 0xbf, 0x58, 0xe2, 0xe8, 0x7f, 0xf1, 0x86, 0x5b, 0x42, 0x65, 0xed, 0xa5, 0x27, 0xee, 0xc6,
		0xba, 0xdc, 0xde, 0xc4, 0xaa, 0x71, 0xbe, 0x91, 0x3f, 0xb5, 0x94, 0x9f, 0x6d, 0x8f, 0x74, 0xe6,
		0xa4, 0xa5, 0x06, 0x1f, 0x5f, 0xa6, 0x3d, 0x35, 0xe5, 0xc8, 0xe7, 0x40, 0x59, 0x14, 0xb0, 0x05,
		0x30, 0x98, 0xa5, 0x40, 0x52, 0xe7, 0x94, 0xcf, 0x8b, 0x4a, 0x70, 0x52, 0xb8, 0xa5, 0xeb, 0xcd,
		0x2d, 0xac, 0x44, 0x02, 0x5f, 0x8e, 0x92, 0x29, 0x4c, 0xb4, 0x86, 0x03, 0x69, 0xc0, 0xf9, 0x9d,
		0xe9, 0x78, 0xc4, 0x98, 0xb2, 0xb3, 0x8d, 0x77, 0x85, 0xa8, 0x2a, 0x5b, 0x45, 0xa1, 0x87, 0x91,
		0x4f, 0xdf, 0xd8, 0x46, 0x93, 0xd1, 0x3f, 0x07, 0x04, 0x13, 0x8d, 0xac, 0xd2, 0xc4, 0x67, 0x6f,
		0x5f, 0x49, 0xba, 0xc4, 0x56, 0x21, 0x87, 0xfd, 0x95, 0x33, 0x26, 0x63, 0x4f, 0x82, 0xb3, 0x3c,
		0x91, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x02, 0x58, 0x30, 0x82, 0x02, 0x54, 0x30, 0x0e,
		0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x13,
		0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
		0x07, 0x03, 0x01, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30,
		0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x2a, 0x05, 0x0c, 0x06,
		0x5a, 0x82, 0x41, 0x6b, 0x5a, 0x13, 0x2a, 0xab, 0xa9, 0xa3, 0x85, 0xba, 0xc5, 0x3e, 0xa3, 0xd8,
		0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x98, 0xd1, 0xf8,
		0x6e, 0x10, 0xeb, 0xcf, 0x9b, 0xec, 0x60, 0x9f, 0x18, 0x90, 0x1b, 0xa0, 0xeb, 0x7d, 0x09, 0xfd,
		0x2b, 0x30, 0x64, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x58, 0x30,
		0x56, 0x30, 0x27, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x1b, 0x68,
		0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x70, 0x6b, 0x69, 0x2e, 0x67,
		0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x74, 0x73, 0x31, 0x6f, 0x31, 0x30, 0x2b, 0x06, 0x08, 0x2b, 0x06,
		0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x70,
		0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x73, 0x72, 0x32, 0x2f, 0x47, 0x54, 0x53,
		0x31, 0x4f, 0x31, 0x2e, 0x63, 0x72, 0x74, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x16,
		0x30, 0x14, 0x82, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
		0x69, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x21, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04, 0x1a, 0x30,
		0x18, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0c, 0x01, 0x02, 0x02, 0x30, 0x0c, 0x06, 0x0a, 0x2b,
		0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x05, 0x03, 0x30, 0x2f, 0x06, 0x03, 0x55, 0x1d, 0x1f,
		0x04, 0x28, 0x30, 0x26, 0x30, 0x24, 0xa0, 0x22, 0xa0, 0x20, 0x86, 0x1e, 0x68, 0x74, 0x74, 0x70,
		0x3a, 0x2f, 0x2f, 0x63, 0x72, 0x6c, 0x2e, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f,
		0x47, 0x54, 0x53, 0x31, 0x4f, 0x31, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x82, 0x01, 0x04, 0x06, 0x0a,
		0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x02, 0x04, 0x81, 0xf5, 0x04, 0x81, 0xf2,
		0x00, 0xf0, 0x00, 0x77, 0x00, 0xa4, 0xb9, 0x09, 0x90, 0xb4, 0x18, 0x58, 0x14, 0x87, 0xbb, 0x13,
		0xa2, 0xcc, 0x67, 0x70, 0x0a, 0x3c, 0x35, 0x98, 0x04, 0xf9, 0x1b, 0xdf, 0xb8, 0xe3, 0x77, 0xcd,
		0x0e, 0xc8, 0x0d, 0xdc, 0x10, 0x00, 0x00, 0x01, 0x66, 0x5d, 0x0f, 0x73, 0xcb, 0x00, 0x00, 0x04,
		0x03, 0x00, 0x48, 0x30, 0x46, 0x02, 0x21, 0x00, 0x92, 0x64, 0x25, 0x9e, 0x2c, 0x9b, 0xec, 0x89,
		0x55, 0xba, 0x0a, 0x0f, 0xa0, 0x8f, 0xff, 0x70, 0x61, 0x32, 0x51, 0xce, 0xee, 0x07, 0x8a, 0xa7,
		0xb8, 0x79, 0x8e, 0x1c, 0xfe, 0x6c, 0xb3, 0x8e, 0x02, 0x21, 0x00, 0xb4, 0x9b, 0x8b, 0xf4, 0xe1,
		0xcd, 0xcc, 0xea, 0xb6, 0x28, 0xf7, 0x76, 0x4d, 0xef, 0x6c, 0xb7, 0x08, 0x5b, 0x72, 0xe5, 0xd8,
		0x1d, 0x28, 0xef, 0x91, 0x90, 0x76, 0x13, 0x22, 0x81, 0xb0, 0x60, 0x00, 0x75, 0x00, 0x56, 0x14,
		0x06, 0x9a, 0x2f, 0xd7, 0xc2, 0xec, 0xd3, 0xf5, 0xe1, 0xbd, 0x44, 0xb2, 0x3e, 0xc7, 0x46, 0x76,
		0xb9, 0xbc, 0x99, 0x11, 0x5c, 0xc0, 0xef, 0x94, 0x98, 0x55, 0xd6, 0x89, 0xd0, 0xdd, 0x00, 0x00,
		0x01, 0x66, 0x5d, 0x0f, 0x73, 0xe4, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20,
		0x5c, 0x0b, 0x00, 0x3d, 0x8f, 0xb3, 0x53, 0x19, 0x73, 0xf6, 0xef, 0xcc, 0xf8, 0x86, 0xbf, 0xee,
		0x08, 0x78, 0x80, 0x14, 0xbc, 0xa8, 0x0a, 0xad, 0x8a, 0xd3, 0xec, 0x8b, 0x47, 0x02, 0x54, 0x6e,
		0x02, 0x20, 0x7f, 0xc8, 0x07, 0x8e, 0xfa, 0x70, 0xda, 0x60, 0x75, 0x11, 0x28, 0xea, 0xd8, 0xe7,
		0xf7, 0x03, 0x40, 0x04, 0x03, 0x00, 0xa4, 0x9c, 0x26, 0x84, 0x28, 0x55, 0x32, 0x67, 0xb7, 0xff,
		0x42, 0xd2, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05,
		0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x8f, 0x67, 0x4d, 0xf4, 0x4a, 0x21, 0x68, 0x2d, 0x95, 0x69,
		0x77, 0xc0, 0x12, 0xf9, 0xe4, 0x44, 0xd5, 0xea, 0x46, 0xb3, 0xb2, 0x98, 0x56, 0xd7, 0x20, 0x1c,
		0xe4, 0x3b, 0xa6, 0xe9, 0x73, 0xb8, 0xd6, 0x46, 0x73, 0xc0, 0x9e, 0xb5, 0xc0, 0x99, 0x9d, 0x45,
		0x14, 0xff, 0x52, 0xc0, 0x88, 0xcb, 0x52, 0x84, 0xb7, 0x67, 0x34, 0x12, 0x38, 0x25, 0x9c, 0x90,
		0x85, 0xd9, 0xe6, 0xb0, 0x70, 0x45, 0xa5, 0x2d, 0x06, 0x36, 0x5c, 0xf2, 0xf2, 0x16, 0x39, 0x16,
		0x40, 0xd6, 0xd2, 0x84, 0x1d, 0x62, 0xe1, 0x6d, 0x8d, 0x44, 0x6c, 0xcf, 0x86, 0xdd, 0xe6, 0xd5,
		0xbe, 0x3d, 0x85, 0xbb, 0x2d, 0xb9, 0x73, 0x3a, 0xb5, 0x7e, 0x42, 0xc8, 0x41, 0xe7, 0x4e, 0x1f,
		0x01, 0xa2, 0x6e, 0x3f, 0x5a, 0x51, 0x62, 0x87, 0x38, 0x60, 0x9f, 0xcd, 0x43, 0x95, 0xda, 0x20,
		0xcf, 0xf2, 0xb6, 0x53, 0x03, 0x3a, 0x4b, 0xa0, 0x81, 0xfd, 0x21, 0x31, 0x92, 0x25, 0x5f, 0xbf,
		0xec, 0xdb, 0x27, 0x4a, 0xe3, 0xbe, 0x0f, 0x78, 0x02, 0x57, 0x63, 0x51, 0xf5, 0x30, 0x90, 0x8f,
		0x55, 0x34, 0xc8, 0xc4, 0x3f, 0x97, 0xbc, 0xc9, 0xd0, 0x77, 0xa0, 0xb9, 0x7a, 0x82, 0x5a, 0x42,
		0x78, 0x5e, 0x5d, 0x81, 0xf4, 0x97, 0xe1, 0x4f, 0x71, 0xdf, 0x9a, 0x23, 0xfc, 0x82, 0x1d, 0xdd,
		0x41, 0x3f, 0x74, 0xfa, 0x5b, 0xfe, 0xa8, 0x06, 0xbe, 0xc9, 0x1f, 0x75, 0xec, 0xed, 0x99, 0x4b,
		0x5e, 0xfc, 0xa4, 0xa6, 0xae, 0x2c, 0x1c, 0x81, 0x45, 0x96, 0x79, 0x77, 0xd3, 0x6c, 0x8d, 0xf3,
		0xb2, 0x29, 0x30, 0x65, 0xb9, 0x29, 0x99, 0x16, 0x0a, 0x9a, 0x33, 0xe6, 0x86, 0xfe, 0x2b, 0x96,
		0x2c, 0xc6, 0x08, 0x6b, 0x7c, 0x3e, 0x7f, 0x29, 0xab, 0xc3, 0x36, 0x28, 0x37, 0xff, 0x3f, 0x79,
		0x15, 0xa2, 0xdd, 0xde, 0xd7, 0xc4,
	}
	attestation1CACert0 = []byte{
		0x30, 0x82, 0x04, 0x4a, 0x30, 0x82, 0x03, 0x32, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x0d, 0x01,
		0xe3, 0xb4, 0x9a, 0xa1, 0x8d, 0x8a, 0xa9, 0x81, 0x25, 0x69, 0x50, 0xb8, 0x30, 0x0d, 0x06, 0x09,
		0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x4c, 0x31, 0x20, 0x30,
		0x1e, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x17, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69,
		0x67, 0x6e, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x41, 0x20, 0x2d, 0x20, 0x52, 0x32, 0x31,
		0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
		0x53, 0x69, 0x67, 0x6e, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0a, 0x47,
		0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x30,
		0x36, 0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x5a, 0x17, 0x0d, 0x32, 0x31, 0x31, 0x32,
		0x31, 0x35, 0x30, 0x30, 0x30, 0x30, 0x34, 0x32, 0x5a, 0x30, 0x42, 0x31, 0x0b, 0x30, 0x09, 0x06,
		0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04,
		0x0a, 0x13, 0x15, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20,
		0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04,
		0x03, 0x13, 0x0a, 0x47, 0x54, 0x53, 0x20, 0x43, 0x41, 0x20, 0x31, 0x4f, 0x31, 0x30, 0x82, 0x01,
		0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00,
		0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd0, 0x18,
		0xcf, 0x45, 0xd4, 0x8b, 0xcd, 0xd3, 0x9c, 0xe4, 0x40, 0xef, 0x7e, 0xb4, 0xdd, 0x69, 0x21, 0x1b,
		0xc9, 0xcf, 0x3c, 0x8e, 0x4c, 0x75, 0xb9, 0x0f, 0x31, 0x19, 0x84, 0x3d, 0x9e, 0x3c, 0x29, 0xef,
		0x50, 0x0d, 0x10, 0x93, 0x6f, 0x05, 0x80, 0x80, 0x9f, 0x2a, 0xa0, 0xbd, 0x12, 0x4b, 0x02, 0xe1,
		0x3d, 0x9f, 0x58, 0x16, 0x24, 0xfe, 0x30, 0x9f, 0x0b, 0x74, 0x77, 0x55, 0x93, 0x1d, 0x4b, 0xf7,
		0x4d, 0xe1, 0x92, 0x82, 0x10, 0xf6, 0x51, 0xac, 0x0c, 0xc3, 0xb2, 0x22, 0x94, 0x0f, 0x34, 0x6b,
		0x98, 0x10, 0x49, 0xe7, 0x0b, 0x9d, 0x83, 0x39, 0xdd, 0x20, 0xc6, 0x1c, 0x2d, 0xef, 0xd1, 0x18,
		0x61, 0x65, 0xe7, 0x23, 0x83, 0x20, 0xa8, 0x23, 0x12, 0xff, 0xd2, 0x24, 0x7f, 0xd4, 0x2f, 0xe7,
		0x44, 0x6a, 0x5b, 0x4d, 0xd7, 0x50, 0x66, 0xb0, 0xaf, 0x9e, 0x42, 0x63, 0x05, 0xfb, 0xe0, 0x1c,
		0xc4, 0x63, 0x61, 0xaf, 0x9f, 0x6a, 0x33, 0xff, 0x62, 0x97, 0xbd, 0x48, 0xd9, 0xd3, 0x7c, 0x14,
		0x67, 0xdc, 0x75, 0xdc, 0x2e, 0x69, 0xe8, 0xf8, 0x6d, 0x78, 0x69, 0xd0, 0xb7, 0x10, 0x05, 0xb8,
		0xf1, 0x31, 0xc2, 0x3b, 0x24, 0xfd, 0x1a, 0x33, 0x74, 0xf8, 0x23, 0xe0, 0xec, 0x6b, 0x19, 0x8a,
		0x16, 0xc6, 0xe3, 0xcd, 0xa4, 0xcd, 0x0b, 0xdb, 0xb3, 0xa4, 0x59, 0x60, 0x38, 0x88, 0x3b, 0xad,
		0x1d, 0xb9, 0xc6, 0x8c, 0xa7, 0x53, 0x1b, 0xfc, 0xbc, 0xd9, 0xa4, 0xab, 0xbc, 0xdd, 0x3c, 0x61,
		0xd7, 0x93, 0x15, 0x98, 0xee, 0x81, 0xbd, 0x8f, 0xe2, 0x64, 0x47, 0x20, 0x40, 0x06, 0x4e, 0xd7,
		0xac, 0x97, 0xe8, 0xb9, 0xc0, 0x59, 0x12, 0xa1, 0x49, 0x25, 0x23, 0xe4, 0xed, 0x70, 0x34, 0x2c,
		0xa5, 0xb4, 0x63, 0x7c, 0xf9, 0xa3, 0x3d, 0x83, 0xd1, 0xcd, 0x6d, 0x24, 0xac, 0x07, 0x02, 0x03,
		0x01, 0x00, 0x01, 0xa3, 0x82, 0x01, 0x33, 0x30, 0x82, 0x01, 0x2f, 0x30, 0x0e, 0x06, 0x03, 0x55,
		0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x1d, 0x06, 0x03, 0x55,
		0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01,
		0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d,
		0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x1d,
		0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x98, 0xd1, 0xf8, 0x6e, 0x10, 0xeb, 0xcf,
		0x9b, 0xec, 0x60, 0x9f, 0x18, 0x90, 0x1b, 0xa0, 0xeb, 0x7d, 0x09, 0xfd, 0x2b, 0x30, 0x1f, 0x06,
		0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x9b, 0xe2, 0x07, 0x57, 0x67, 0x1c,
		0x1e, 0xc0, 0x6a, 0x06, 0xde, 0x59, 0xb4, 0x9a, 0x2d, 0xdf, 0xdc, 0x19, 0x86, 0x2e, 0x30, 0x35,
		0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x29, 0x30, 0x27, 0x30, 0x25,
		0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x19, 0x68, 0x74, 0x74, 0x70,
		0x3a, 0x2f, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
		0x2f, 0x67, 0x73, 0x72, 0x32, 0x30, 0x32, 0x06, 0x03, 0x55, 0x1d, 0x1f, 0x04, 0x2b, 0x30, 0x29,
		0x30, 0x27, 0xa0, 0x25, 0xa0, 0x23, 0x86, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63,
		0x72, 0x6c, 0x2e, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x67, 0x73, 0x72, 0x32,
		0x2f, 0x67, 0x73, 0x72, 0x32, 0x2e, 0x63, 0x72, 0x6c, 0x30, 0x3f, 0x06, 0x03, 0x55, 0x1d, 0x20,
		0x04, 0x38, 0x30, 0x36, 0x30, 0x34, 0x06, 0x06, 0x67, 0x81, 0x0c, 0x01, 0x02, 0x02, 0x30, 0x2a,
		0x30, 0x28, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1c, 0x68, 0x74,
		0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x6b, 0x69, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x2f, 0x72,
		0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
		0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x1a, 0x80,
		0x3e, 0x36, 0x79, 0xfb, 0xf3, 0x2e, 0xa9, 0x46, 0x37, 0x7d, 0x5e, 0x54, 0x16, 0x35, 0xae, 0xc7,
		0x4e, 0x08, 0x99, 0xfe, 0xbd, 0xd1, 0x34, 0x69, 0x26, 0x52, 0x66, 0x07, 0x3d, 0x0a, 0xba, 0x49,
		0xcb, 0x62, 0xf4, 0xf1, 0x1a, 0x8e, 0xfc, 0x11, 0x4f, 0x68, 0x96, 0x4c, 0x74, 0x2b, 0xd3, 0x67,
		0xde, 0xb2, 0xa3, 0xaa, 0x05, 0x8d, 0x84, 0x4d, 0x4c, 0x20, 0x65, 0x0f, 0xa5, 0x96, 0xda, 0x0d,
		0x16, 0xf8, 0x6c, 0x3b, 0xdb, 0x6f, 0x04, 0x23, 0x88, 0x6b, 0x3a, 0x6c, 0xc1, 0x60, 0xbd, 0x68,
		0x9f, 0x71, 0x8e, 0xee, 0x2d, 0x58, 0x34, 0x07, 0xf0, 0xd5, 0x54, 0xe9, 0x86, 0x59, 0xfd, 0x7b,
		0x5e, 0x0d, 0x21, 0x94, 0xf5, 0x8c, 0xc9, 0xa8, 0xf8, 0xd8, 0xf2, 0xad, 0xcc, 0x0f, 0x1a, 0xf3,
		0x9a, 0xa7, 0xa9, 0x04, 0x27, 0xf9, 0xa3, 0xc9, 0xb0, 0xff, 0x02, 0x78, 0x6b, 0x61, 0xba, 0xc7,
		0x35, 0x2b, 0xe8, 0x56, 0xfa, 0x4f, 0xc3, 0x1c, 0x0c, 0xed, 0xb6, 0x3c, 0xb4, 0x4b, 0xea, 0xed,
		0xcc, 0xe1, 0x3c, 0xec, 0xdc, 0x0d, 0x8c, 0xd6, 0x3e, 0x9b, 0xca, 0x42, 0x58, 0x8b, 0xcc, 0x16,
		0x21, 0x17, 0x40, 0xbc, 0xa2, 0xd6, 0x66, 0xef, 0xda, 0xc4, 0x15, 0x5b, 0xcd, 0x89, 0xaa, 0x9b,
		0x09, 0x26, 0xe7, 0x32, 0xd2, 0x0d, 0x6e, 0x67, 0x20, 0x02, 0x5b, 0x10, 0xb0, 0x90, 0x09, 0x9c,
		0x0c, 0x1f, 0x9e, 0xad, 0xd8, 0x3b, 0xea, 0xa1, 0xfc, 0x6c, 0xe8, 0x10, 0x5c, 0x08, 0x52, 0x19,
		0x51, 0x2a, 0x71, 0xbb, 0xac, 0x7a, 0xb5, 0xdd, 0x15, 0xed, 0x2b, 0xc9, 0x08, 0x2a, 0x2c, 0x8a,
		0xb4, 0xa6, 0x21, 0xab, 0x63, 0xff, 0xd7, 0x52, 0x49, 0x50, 0xd0, 0x89, 0xb7, 0xad, 0xf2, 0xaf,
		0xfb, 0x50, 0xae, 0x2f, 0xe1, 0x95, 0x0d, 0xf3, 0x46, 0xad, 0x9d, 0x9c, 0xf5, 0xca,
	}
)

type parseTest struct {
	name         string
	attestation  []byte
	wantSig      []byte
	wantCredCert *x509.Certificate
	wantCACerts  []*x509.Certificate
}

type verifyTest struct {
	name          string
	attestation   []byte
	wantAttType   webauthn.AttestationType
	wantTrustPath interface{}
}

var parseTests = []parseTest{
	{
		"attestation 1",
		[]byte(attestation1),
		attestation1Sig,
		parseCertificate(attestation1CredCert),
		[]*x509.Certificate{parseCertificate(attestation1CACert0)},
	},
}

var verifyTests = []verifyTest{
	{
		"attestation 1",
		[]byte(attestation1),
		webauthn.AttestationTypeBasic,
		[]*x509.Certificate{parseCertificate(attestation1CredCert), parseCertificate(attestation1CACert0), parsePemCertificate(googleGlobalSignRootCAR2CertPem)},
	},
}

func parsePemCertificate(s string) *x509.Certificate {
	block, _ := pem.Decode([]byte(s))
	if block == nil {
		panic("failed to decode pem " + s)
	}
	return parseCertificate(block.Bytes)
}

func parseCertificate(data []byte) *x509.Certificate {
	c, err := x509.ParseCertificate(data)
	if err != nil {
		panic(err)
	}
	return c
}

func certificateEqual(c1 *x509.Certificate, c2 *x509.Certificate) bool {
	if c1 == nil && c2 == nil {
		return true
	}
	if (c1 == nil && c2 != nil) || (c1 != nil && c2 == nil) {
		return false
	}
	return bytes.Equal(c1.Raw, c2.Raw)
}

func TestParseAndroidSafetyNetAttestation(t *testing.T) {
	for _, tc := range parseTests {
		t.Run(tc.name, func(t *testing.T) {
			var credentialAttestation webauthn.PublicKeyCredentialAttestation
			if err := json.Unmarshal(tc.attestation, &credentialAttestation); err != nil {
				t.Fatalf("failed to unmarshal attestation %s: %q", string(tc.attestation), err)
			}
			attStmt, ok := credentialAttestation.AttStmt.(*androidSafetyNetAttestationStatement)
			if !ok {
				t.Fatalf("attestation type %T, want *androidSafetyNetAttestationStatement", credentialAttestation.AttStmt)
			}
			if !bytes.Equal(attStmt.sig, tc.wantSig) {
				t.Errorf("attestation sig %v, want %v", attStmt.sig, tc.wantSig)
			}
			if !certificateEqual(attStmt.attestnCert, tc.wantCredCert) {
				t.Errorf("attestation cred cert %v, want %v", attStmt.attestnCert, tc.wantCredCert)
			}
			if len(attStmt.caCerts) != len(tc.wantCACerts) {
				t.Errorf("attestation has %d ca certificates, want %d", len(attStmt.caCerts), len(tc.wantCACerts))
			} else {
				for i, c := range attStmt.caCerts {
					if !bytes.Equal(c.Raw, tc.wantCACerts[i].Raw) {
						t.Errorf("attestation ca cert %d %v, want %v", i, c, tc.wantCACerts[i])
					}
				}
			}
		})
	}
}

func TestVerifyAndroidSafetyNetAttestation(t *testing.T) {
	for _, tc := range verifyTests {
		t.Run(tc.name, func(t *testing.T) {
			var credentialAttestation webauthn.PublicKeyCredentialAttestation
			if err := json.Unmarshal(tc.attestation, &credentialAttestation); err != nil {
				t.Fatalf("failed to unmarshal attestation %s: %q", string(tc.attestation), err)
			}
			_, _, err := credentialAttestation.VerifyAttestationStatement()
			if err == nil {
				t.Fatalf("VerifyAttestationStatement() doesn't return error, want %q", "webauthn/android_safetynet_attestation: failed to verify certificate: x509: certificate has expired or is not yet valid")
			}
			/*
				if attType != tc.wantAttType {
					t.Errorf("attestation type %v, want %v", attType, tc.wantAttType)
				}
				if !reflect.DeepEqual(trustPath, tc.wantTrustPath) {
					t.Errorf("trust path %v, want %v", trustPath, tc.wantTrustPath)
				}
			*/
		})
	}
}
